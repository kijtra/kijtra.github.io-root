<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>きじとら</title>
    <link>https://kijtra.com/</link>
    <description>Webのこととかそのたもろもろ</description>
    <language>ja</language>
    <copyright>&amp;copy; kijtra.com</copyright>
    <lastBuildDate>Fri, 12 Feb 2016 12:15:29 +0900</lastBuildDate>
    <atom:link href="https://kijtra.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ブログを常時SSL(https)化した</title>
      <link>https://kijtra.com/article/support-https</link>
      <pubDate>Fri, 12 Feb 2016 12:15:29 +0900</pubDate>
      
      <guid>https://kijtra.com/article/support-https</guid>
      <description>&lt;p&gt;いまさら感があるけどブログを常時SSL化してみた。&lt;br /&gt;
SEO的な影響などを調べるためにメモ。&lt;/p&gt;

&lt;p&gt;これまでも常時SSLできる環境は整ってたけど忘れてた・・・。&lt;/p&gt;

&lt;p&gt;2016/02/12時点、このブログの環境は以下のようになっている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ドメイン（年1,180円）・・・&lt;a href=&#34;http://www.star-domain.jp/&#34;&gt;スタードメイン&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.netowl.jp/&#34;&gt;ネットオウル&lt;/a&gt;という会社のドメインサービス。&lt;br /&gt;
安いのはもちろん、ICANN認定レジストラであるというのと、PHPが動く小さな無料サーバーもついてくるのでここでドメイン取得した。&lt;/li&gt;
&lt;li&gt;DNS（無料）・・・&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt;&lt;br /&gt;
上記スタードメインからネームサーバーをこのCloudFlareに向けて管理してる。&lt;br /&gt;
SSLも無料で使え、キャッシュによるページ高速化もでき、さらにHTTP/2にも無料で対応。至れり尽くせり。&lt;/li&gt;
&lt;li&gt;サーバー（無料）・・・&lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;&lt;br /&gt;
GitHubの静的ページホスティングサービス。ブログ用途ならこれで十分。&lt;/li&gt;
&lt;li&gt;構築（無料）・・・&lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt; ＋ &lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt;&lt;br /&gt;
AtomでMarkdown書いてhugoで自動生成し、GitHub Pagesにプッシュして公開してる。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ようするに、ドメイン代金以外はすべて無料でやってる。&lt;br /&gt;
また、ところどころに貼ってあるAdSenseで、ドメイン代金の年1,180円（月にすると100円以下）は賄えてるので出費のようなものは特にない。&lt;/p&gt;

&lt;p&gt;うちの場合、常時SSL化の理由はSEOのみ。&lt;br /&gt;
Google Analytics と Google Search Console でドメインをhttpsにしたので、その経過をみていこうと思う。&lt;/p&gt;

&lt;p&gt;ちなみに Search Console の方は、非httpsドメインは消さず、しばらくはhttpsドメインと両方をウォッチする。&lt;br /&gt;
CloudFlareで「httpでのアクセスは全てhttpsへリダイレクト」の設定にしているので、非httpsの方はアクセスが減少し、httpsドメインのアクセスに移っていくようになると思う。&lt;br /&gt;
設定後にサイトマップ更新を忘れないようにした。&lt;/p&gt;

&lt;p&gt;Analyticsは「プロパティの設定」で「http」を「https」にした。&lt;br /&gt;
また、Search Consoleとの連携もhttpsの方に変更。&lt;br /&gt;
加えてレポートの「メモ」機能で2016/02/12の部分に常時SSL化の旨をメモした。&lt;/p&gt;

&lt;p&gt;本来、サイトを常時SSL化する場合は一部のページから少しずつやるべきだけど、hugoでそういうのは難しいので全ページを一度にSSL化。&lt;br /&gt;
HTMLヘッダでのcanonical属性もセットした。&lt;br /&gt;
http→httpsにリダイレクトされるので必要ないかもとは思ったけど一応。&lt;/p&gt;

&lt;p&gt;あとは&lt;a href=&#34;https://support.google.com/webmasters/answer/6340290&#34;&gt;AMP&lt;/a&gt;に対応してみて、さらに経過を眺めてみようと思う。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>いま入れてるAtomプラグイン（パッケージ）メモ（2015年12月）</title>
      <link>https://kijtra.com/article/my-atom-packages2</link>
      <pubDate>Mon, 28 Dec 2015 10:08:10 +0900</pubDate>
      
      <guid>https://kijtra.com/article/my-atom-packages2</guid>
      <description>

&lt;p&gt;今年のAtomも&lt;a href=&#34;http://blog.atom.io/2015/06/25/atom-1-0.html&#34;&gt;2015年6月末に1.0に達し&lt;/a&gt;、入れてるプラグインも変化があったので改めてまとめてみる。&lt;br /&gt;
&lt;a href=&#34;https://kijtra.com/article/my-atom-packages/&#34;&gt;2015年5月時点のプラグインまとめ&lt;/a&gt; からすると若干減った。&lt;/p&gt;

&lt;h2 id=&#34;新しく導入したもの:4ff662d5165f30a98ed38f25e3389a51&#34;&gt;新しく導入したもの&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/Sublime-Style-Column-Selection&#34;&gt;sublime-style-column-selection&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
いわゆる「矩形選択」ができるプラグイン。いざという時にやっぱり必要だった・・・。&lt;br /&gt;
Markdownの場合は動作が微妙な場合がある（プラビュー中のみ？）。&lt;br /&gt;
&lt;img src=&#34;https://i.github-camo.com/d25f9471535b04a7ce4eece13d6063d5e91372c9/68747470733a2f2f7261772e6769746875622e636f6d2f626967666976652f61746f6d2d7375626c696d652d73656c6563742f6d61737465722f73637265656e73686f742e706e67&#34; alt=&#34;sublime-style-column-selection&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/atom-beautify&#34;&gt;atom-beautify&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
コマンド一発でコードを整形してくれるプラグイン。&lt;br /&gt;
言語（拡張子）ごとに設定できたり、「選択したテキストのみ整形」とかできるので助かる。&lt;br /&gt;
例えば、Web上で見つけたコードをコピペした際にインデントの形式とかが自分のスタイルと違ったりなんかがよくあると思うけど、そういう時に便利。&lt;br /&gt;
個人的には &lt;a href=&#34;https://atom.io/packages/flex-tool-bar&#34;&gt;flex-tool-bar&lt;/a&gt; に &lt;code&gt;atom-beautify:beautify-editor&lt;/code&gt; のコマンドを付けてボタン一発でできるようにしてる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/editorconfig&#34;&gt;editorconfig&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://editorconfig.org/&#34;&gt;EditorConfig&lt;/a&gt; という定番規格(?)に対応するプラグイン。&lt;br /&gt;
EditorConfigというのは、&lt;code&gt;.editorconfig&lt;/code&gt; というファイルをどこかに用意し、そこに設定（インデントサイズとか改行コードとかそういうの）を書いておくことで、他のIDEやエディタでもそのファイルを共有して同じ設定を適用できる(「EditorConfig」に対応していれば)というもの。&lt;br /&gt;
Sublime Textや自宅/職場などでと同じ設定を使いたいので入れた。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/highlight-column&#34;&gt;highlight-column&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
タテの列をハイライト（明るく）するプラグイン。地味に必須。&lt;br /&gt;
&lt;img src=&#34;https://i.github-camo.com/f8fcaa025f37aa99aeba70272fce528457eb7ad5/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313235333635392f323336353733362f62363063396239302d613664612d313165332d383038312d6663383735333738333433352e706e67&#34; alt=&#34;highlight-column&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/pigments&#34;&gt;pigments&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
コード中のカラーコードっぽい文字列の背景に、その色をつけてくれる。&lt;br /&gt;
SassやLESSの変数でも探しだして色を付けてくれるのがありがたい。&lt;br /&gt;
同機能である &lt;a href=&#34;https://atom.io/packages/atom-color-highlight&#34;&gt;atom-color-highlight&lt;/a&gt; の動作が少し微妙だったためこちらに変更。&lt;br /&gt;
&lt;img src=&#34;https://i.github-camo.com/16c0c12a183c6f57fb33481984593a515777d5e8/68747470733a2f2f6769746875622e636f6d2f61626533332f61746f6d2d7069676d656e74732f626c6f622f6d61737465722f7265736f75726365732f7069676d656e74732e6769663f7261773d74727565&#34; alt=&#34;pigments&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/terminal-panel&#34;&gt;terminal-panel&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
ウインドウ下部にターミナル（コマンドプロンプト）用の入力欄を出してコマンドが打てるプラグイン。&lt;br /&gt;
タスクランナーの起動とかPHPのビルトインサーバー起動とかに活躍中。ターミナルが複数起動できるのも非常に良い。&lt;br /&gt;
コマンド結果の文字がコピペできないのが少し不便なのと、コマンド結果文字のハイライト色が設定できるといいなあと思う。　　
&lt;img src=&#34;https://i.github-camo.com/08b164c6803467b8824a34ca9f52b6f2d1d6b2e6/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74686564616e69656c2f7465726d696e616c2d70616e656c2f6d61737465722f7465726d696e616c2d64656d6f2e676966&#34; alt=&#34;terminal-panel&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/activate-power-mode&#34;&gt;activate-power-mode&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
個人的な2015年いちばんのヒットプラグイン。&lt;br /&gt;
以下画像のような我がコード！こそ！最強ッッ！状態になるだけのもの。&lt;br /&gt;
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;O&lt;/kbd&gt;で簡単にON/OFFできます。
&lt;img src=&#34;https://i.github-camo.com/b1d03b9b7a9d7dc9a32d1eab307b5378f8c59a7b/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3638383431352f31313631353536352f31306631363435362d396336352d313165352d386166342d3236356630316663383361302e676966&#34; alt=&#34;activate-power-mode&#34; /&gt;
&lt;br /&gt;
地味なコーディング作業にこういう華のある演出はとても大切だなと思うし、こういうのを作ろうという気概って他人に良い影響を与えると思うのです。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;変わらず使っているもの:4ff662d5165f30a98ed38f25e3389a51&#34;&gt;変わらず使っているもの&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/emmet&#34;&gt;emmet&lt;/a&gt;&lt;br /&gt;
HTML等を簡単な記述でコーディングできるプラグイン。もう公式で良いのでは。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/minimap&#34;&gt;minimap&lt;/a&gt;&lt;br /&gt;
エディタの横にファイルの全体像を表示する。こちらも公式に取り込んで良いのでは。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/project-manager&#34;&gt;project-manager&lt;/a&gt;&lt;br /&gt;
プロジェクトを管理するプラグイン。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/atom-terminal&#34;&gt;atom-terminal&lt;/a&gt;&lt;br /&gt;
いま開いているプロジェクトのディレクトリでターミナル系アプリを起動するプラグイン。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/linter&#34;&gt;linter&lt;/a&gt;&lt;br /&gt;
コードのリアルタイムエラー検出。こちらも公式取り込み希望。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/tool-bar&#34;&gt;tool-bar&lt;/a&gt;&lt;br /&gt;
エディタの上下左右好きなところにボタンを設置できる。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/flex-tool-bar&#34;&gt;flex-tool-bar&lt;/a&gt;&lt;br /&gt;
上記tool-barに依存し、好きなアイコン＆コマンドでボタンを設置できる。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/remote-ftp&#34;&gt;Remote-FTP&lt;/a&gt;&lt;br /&gt;
(S)FTPでのアップ・ダウンロードが可能なプラグイン。&lt;br /&gt;
あまり使う機会は多くないけど入れている。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/language-nginx&#34;&gt;language-nginx&lt;/a&gt;&lt;br /&gt;
nginxのconfファイルのシンタックスハイライト。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/language-apache&#34;&gt;language-apache&lt;/a&gt;&lt;br /&gt;
Apache系（htaccessなど）のシンタックスハイライト。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;削除したもの:4ff662d5165f30a98ed38f25e3389a51&#34;&gt;削除したもの&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://atom.io/packages/japanese-wrap&#34;&gt;japanese-wrap&lt;/a&gt;&lt;/del&gt;&lt;br /&gt;
日本語の文章がウインドウの端で改行されるようにするプラグインだけど、&lt;a href=&#34;http://blog.atom.io/2015/11/12/atom-1-2.html&#34;&gt;Atom1.2から公式対応された&lt;/a&gt;ため不要に。大変お世話になりました。&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://atom.io/packages/atom-color-highlight&#34;&gt;atom-color-highlight&lt;/a&gt;&lt;/del&gt;&lt;br /&gt;
コード中のCSSカラーっぽい文字をの背景にその色を表示する。色がついた部分がズレたりとかがあったので、同機能の &lt;a href=&#34;https://atom.io/packages/pigments&#34;&gt;pigments&lt;/a&gt; に変更。&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://atom.io/packages/open-last-project&#34;&gt;open-last-project&lt;/a&gt;&lt;/del&gt;&lt;br /&gt;
特になくても上記 project-manager のみで動いているので不要に。&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://atom.io/packages/chary-tree-view&#34;&gt;chary-tree-view&lt;/a&gt;&lt;/del&gt;&lt;br /&gt;
左サイドのファイルツリーで、シングルクリックのプレビューを表示しないプラグイン。&lt;br /&gt;
以前&lt;a href=&#34;http://ja.stackoverflow.com/q/10485/3876&#34;&gt;StackOverflowでの質問から作っていただいた&lt;/a&gt;ものだけど、プレビューありで慣れるように修行して不要に。&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt;&lt;/del&gt;&lt;br /&gt;
ターミナル系アプリを使わなくてもGitコマンドを使えるプラグイン。&lt;br /&gt;
Gitはターミナルで操作してしまうことが多いのと、Windowsだと微妙な動作があったりでとりあえず削除。&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://atom.io/packages/git-control&#34;&gt;git-control&lt;/a&gt;&lt;/del&gt;&lt;br /&gt;
こちらも上記と同様の理由で削除。&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://atom.io/packages/less-autocompile&#34;&gt;less-autocompile&lt;/a&gt;&lt;/del&gt;&lt;br /&gt;
SASSでの管理に移行し、 &lt;a href=&#34;https://atom.io/packages/sass-autocompile&#34;&gt;sass-autocompile&lt;/a&gt; を入れたので不要に。&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://atom.io/packages/script&#34;&gt;script&lt;/a&gt;&lt;/del&gt;&lt;br /&gt;
コードの一部を選択してこのプラグインを使うと、その部分のコードを実行してくれる。あまり使う機会がなかったので削除。&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://atom.io/packages/php-documentation-online&#34;&gt;php-documentation-online&lt;/a&gt;&lt;/del&gt;&lt;br /&gt;
PHPの関数などのドキュメントがその場で見られる。ブラウザで見てしまうことが多いため削除。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;ということでいまのところまだAtomをメインで使っている。&lt;br /&gt;
&lt;a href=&#34;https://www.visualstudio.com/ja-jp/products/code-vs.aspx&#34;&gt;Visual Studio Code&lt;/a&gt;が話題になったけど、PHPメインの場合は今のところあまり使えなさそう。&lt;br /&gt;
&lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;は2015年3月以降、動きが完全停止・・・簡易エディタとしてはバリバリ使ってるので、クマムシのように息を吹き返すのを期待。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>日本語対応のテキストを Diff するクラス</title>
      <link>https://kijtra.com/article/php-text-diff</link>
      <pubDate>Sat, 31 Oct 2015 10:41:59 +0900</pubDate>
      
      <guid>https://kijtra.com/article/php-text-diff</guid>
      <description>

&lt;p&gt;シンプルなText Diff系のライブラリを探してたんだけど、行単位で検出するものが多かったので、単語区切りで検出できないかと思って作ってみた。&lt;/p&gt;

&lt;p&gt;個人的なプロジェクトでテキストの差分を目視するようなの作ってて、ググッて見つけたラブラリのなかでは、以下のものが最も人気だった。&lt;/p&gt;

&lt;p&gt;PHP Fine Diff&lt;br /&gt;
&lt;a href=&#34;http://www.raymondhill.net/finediff/viewdiff-ex.php&#34;&gt;http://www.raymondhill.net/finediff/viewdiff-ex.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;英文なら半角空白で区切って楽にdiffできるんだけど、日本語だとどうしても行単位でしか違いを検出できない。&lt;/p&gt;

&lt;p&gt;そこで、「なんちゃって分かち書き」で対応してみたものを作った。&lt;br /&gt;
「なんちゃって」というのは、正規表現を使って単に&lt;strong&gt;「漢字・ひらがな・カタカナ・英字・その他」で分けただけ&lt;/strong&gt;というもの。&lt;br /&gt;
「差分を目視で探す」というdiffの最終目的を満たすなら、行単位よりもある程度は単語で句切られていたほうが探す時間の短縮になると思う。&lt;/p&gt;

&lt;p&gt;例としては、以下のような感じを、
&lt;a href=&#34;https://lh3.googleusercontent.com/n6-_CT8egBXq5U53H17kFSOJhLGNw7Fi6kYkGR3H8XdUaiU1i5_95gFK0dAkqZNjqPNhtrq5eH5gMCTwtO14jQjfP-tPGihYlkqYNqbaDPq4EVHgvMmXa8aJ2ykDOi-Prt4LeWGkT5shQyNiwYvUb3uVz0XSSv_4sYhpDh_49wMtyuZP615C5Wo7HKmmxRv4FPK4vMvVE0V3ntYH5OGccM9Wx1yeBybsrS1pvNJbNW4VBEURLIU6Z4qO9bnxah7HL2CuKSbBcAJmYbb6XCnoNtDcuGOsp1ucRmDaIsjBfK4UFQspBY0mYHLpXC5dWVebwKp6rgM69H69PBQXoj8GP67gjiuekdRxEv6N9x-HmvCWBwM4w1PRSiaqmOvI_H78yzjn0CBq5ekzqK6j_n9is4wqnGCrO5wVF16uVQCArSMS_ZvgmCJUaQrL0RyPpEfc_6NRmUu4Kfjv_b2BxmF4fQTpRtzyh4m5z6_axZeDCLPcIS1NgD-uzbqJdt0s8W_syaa21Oa78PFrqg-4YRClOSjV6Gjtvo1ZdZLBCfFgnbk=w735-h86-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/n6-_CT8egBXq5U53H17kFSOJhLGNw7Fi6kYkGR3H8XdUaiU1i5_95gFK0dAkqZNjqPNhtrq5eH5gMCTwtO14jQjfP-tPGihYlkqYNqbaDPq4EVHgvMmXa8aJ2ykDOi-Prt4LeWGkT5shQyNiwYvUb3uVz0XSSv_4sYhpDh_49wMtyuZP615C5Wo7HKmmxRv4FPK4vMvVE0V3ntYH5OGccM9Wx1yeBybsrS1pvNJbNW4VBEURLIU6Z4qO9bnxah7HL2CuKSbBcAJmYbb6XCnoNtDcuGOsp1ucRmDaIsjBfK4UFQspBY0mYHLpXC5dWVebwKp6rgM69H69PBQXoj8GP67gjiuekdRxEv6N9x-HmvCWBwM4w1PRSiaqmOvI_H78yzjn0CBq5ekzqK6j_n9is4wqnGCrO5wVF16uVQCArSMS_ZvgmCJUaQrL0RyPpEfc_6NRmUu4Kfjv_b2BxmF4fQTpRtzyh4m5z6_axZeDCLPcIS1NgD-uzbqJdt0s8W_syaa21Oa78PFrqg-4YRClOSjV6Gjtvo1ZdZLBCfFgnbk=w735-h86-no&#34; alt=&#34;diffの例1&#34; /&gt;
&lt;/a&gt;&lt;br /&gt;
このようにした感じ。&lt;br /&gt;
&lt;a href=&#34;https://lh3.googleusercontent.com/4crkv1ka4QvE0vJ-lbofCxlje6e6zhipUavZOy7Xq1r0M6VJSVRnAL3OdVBlfMwiwry3HD4QkRyXV7-WS7G1vp_Bs_wj-rNqmzGCn782JNCaTeFKgy1IOGWbH7NGlDyhlqcV3AxRulOGkPH_dLauxI_ZGf_J0qpUYdpqjGIOCIFaN3nJRxY7NfQ_TS4eKZ7gdx-G6tVv9lY69ZOCXy3P9puS1TSLoiWhvuKj62CTNpG186kGR3ZgzkjkwdUtONibmIFNutXXkq3rOMpCyrb8KJiETKt2VGwvDWVbvR6Oh4NdVttvPRV98aPUbHDHudAcUuYI3Cnu9TiFK_R5JU1ADYGlP26y3qXDhZJdy380I3eQ1_fNQQPQ554R6-0WE82Gy5kDHXLaftaxbt-vN5XsgTRHDxrSKOLcLVhDiK_FX7RuBOIbiD-ql-wp1Hajz-MkiOuFo8t07nns72j03XdCrBqwXZA-kH_n_3Qws5f7JYYbcqnHosC21Qumn8rJptWcBgeLlJdnLFiU7qCXMH-_FRbmPMQJertAL3iP3Yxpob0=w736-h87-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/4crkv1ka4QvE0vJ-lbofCxlje6e6zhipUavZOy7Xq1r0M6VJSVRnAL3OdVBlfMwiwry3HD4QkRyXV7-WS7G1vp_Bs_wj-rNqmzGCn782JNCaTeFKgy1IOGWbH7NGlDyhlqcV3AxRulOGkPH_dLauxI_ZGf_J0qpUYdpqjGIOCIFaN3nJRxY7NfQ_TS4eKZ7gdx-G6tVv9lY69ZOCXy3P9puS1TSLoiWhvuKj62CTNpG186kGR3ZgzkjkwdUtONibmIFNutXXkq3rOMpCyrb8KJiETKt2VGwvDWVbvR6Oh4NdVttvPRV98aPUbHDHudAcUuYI3Cnu9TiFK_R5JU1ADYGlP26y3qXDhZJdy380I3eQ1_fNQQPQ554R6-0WE82Gy5kDHXLaftaxbt-vN5XsgTRHDxrSKOLcLVhDiK_FX7RuBOIbiD-ql-wp1Hajz-MkiOuFo8t07nns72j03XdCrBqwXZA-kH_n_3Qws5f7JYYbcqnHosC21Qumn8rJptWcBgeLlJdnLFiU7qCXMH-_FRbmPMQJertAL3iP3Yxpob0=w736-h87-no&#34; alt=&#34;diffの例2&#34; /&gt;
&lt;/a&gt;&lt;br /&gt;
少しの違いではあるけど、一行すべてがハイライトされるよりはいいかなと。&lt;/p&gt;

&lt;p&gt;「なんちゃって分かち書き」なので句読点も単語内として認識してるけどw。&lt;/p&gt;

&lt;h2 id=&#34;コードとデモ:bfacb692180ffde178aa850cfcf6ba49&#34;&gt;コードとデモ&lt;/h2&gt;

&lt;p&gt;コードはGitHubに置いた。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;i class=&#34;fa fa-github&#34;&gt;&lt;/i&gt; kijtra/textdiff&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/kijtra/textdiff&#34;&gt;https://github.com/kijtra/textdiff&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あと、デモを以下に置いた。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kijtra/textdiffのデモ&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://demo.kijtra.com/textdiff/&#34;&gt;http://demo.kijtra.com/textdiff/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あとは自分で使いつつ精度や速度を上げていこうっと。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.jsでTwitter Streaming APIをGoogleマップにリアルタイム表示</title>
      <link>https://kijtra.com/article/nodejs-twitter-stream</link>
      <pubDate>Wed, 30 Sep 2015 16:40:15 +0900</pubDate>
      
      <guid>https://kijtra.com/article/nodejs-twitter-stream</guid>
      <description>&lt;p&gt;Node.js初心者なので、リアルタイムの何かをつくってみようと思いTwitterの &lt;a href=&#34;https://dev.twitter.com/streaming/overview&#34;&gt;Streaming API&lt;/a&gt; で試してみた。&lt;/p&gt;

&lt;p&gt;デモを以下に設置した。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TweetMap&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;http://demo.kijtra.com/tweetmap/&#34;&gt;http://demo.kijtra.com/tweetmap/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;画面イメージ。&lt;br /&gt;
&lt;a href=&#34;https://lh3.googleusercontent.com/j83tluvQKkDf6hW9kaom805okRPkXFbRgt5XGdp4_VYAXzPa9Ujg7n3yPJWKftpSFUH0EWgAu3rIJXi_5fN_r1ZnbHgIAu9n5IFhbomzqKi__YV6HqA-riZrzKxjLvm1WYEYLXxCTiCSfeRfLk5Sy4ZG0hDE1RrXTayLOZ4cw-qWEMgIhAw1Dnor4IwyA3sFErUk95BG7FM2NRvyk2ZFikz1fHEr0zpVoAmb_q0cQw07GFNC_qSMVkK4mCtea_bGuFN1Zm47bib9SudDh-MmlUBXUcXMJarLBJoj3WU97RDbMNGGfXeQS9HA22CdJ1nZZp7oGFbYUM_FuxHTx3QDPAdg-IZDsQBS2HkM_PUipKKm64pGIidkXfUiFlydIi8dMKrxWZiOSfIRV3xGxk5YWZXptC02DIw3yBU1pF4IF3bq9mhcn7spHIcutqCCanPo8VCYm38N9e_L2qZBinTsMYXJKhR_KDRi8hmnqQu-KG86APdgpBPKwqCpVdk_Tl3N5LHIf5evBBGgTIqgdIwFxCMFCMZbttklnZ1PStwleHs=w805-h770-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/j83tluvQKkDf6hW9kaom805okRPkXFbRgt5XGdp4_VYAXzPa9Ujg7n3yPJWKftpSFUH0EWgAu3rIJXi_5fN_r1ZnbHgIAu9n5IFhbomzqKi__YV6HqA-riZrzKxjLvm1WYEYLXxCTiCSfeRfLk5Sy4ZG0hDE1RrXTayLOZ4cw-qWEMgIhAw1Dnor4IwyA3sFErUk95BG7FM2NRvyk2ZFikz1fHEr0zpVoAmb_q0cQw07GFNC_qSMVkK4mCtea_bGuFN1Zm47bib9SudDh-MmlUBXUcXMJarLBJoj3WU97RDbMNGGfXeQS9HA22CdJ1nZZp7oGFbYUM_FuxHTx3QDPAdg-IZDsQBS2HkM_PUipKKm64pGIidkXfUiFlydIi8dMKrxWZiOSfIRV3xGxk5YWZXptC02DIw3yBU1pF4IF3bq9mhcn7spHIcutqCCanPo8VCYm38N9e_L2qZBinTsMYXJKhR_KDRi8hmnqQu-KG86APdgpBPKwqCpVdk_Tl3N5LHIf5evBBGgTIqgdIwFxCMFCMZbttklnZ1PStwleHs=w805-h770-no&#34; alt=&#34;TweetMap&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;環境と使用したものは以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CentOS6（さくらVPS 1G）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; 0.10.36

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://expressjs.com/&#34;&gt;express&lt;/a&gt; 4.13.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://socket.io/&#34;&gt;socket.io&lt;/a&gt; 0.9.17&lt;br /&gt;
最新（1.x系）だとなんかうまくいかなかったので0.9系を使った。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/desmondmorris/node-twitter&#34;&gt;twitter&lt;/a&gt; 1.2.5&lt;br /&gt;
TwitterのAPI用ライブラリ。似たやつで「&lt;a href=&#34;https://github.com/istrategylabs/node-twitter&#34;&gt;node-twitter&lt;/a&gt;」というのがあるけど、それとは違うやつ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/twitter/twitter-text-js&#34;&gt;twitter-text&lt;/a&gt; 1.13.2&lt;br /&gt;
ツイートテキストをHTML表示用に変換してくれる公式ライブラリ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/substack/point-in-polygon&#34;&gt;point-in-polygon&lt;/a&gt; 1.0.0&lt;br /&gt;
ある座標（Point）がポリゴンに含まれているか判定してくれるライブラリ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/foreverjs/forever&#34;&gt;forever&lt;/a&gt; 0.15.1&lt;br /&gt;
Node.jsで作ったサーバーを裏側で起動しっぱなしにするやつ。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;クライアントサイド（すべてCDNで対応）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/maps&#34;&gt;Google Maps API&lt;/a&gt; 3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt; 1.10.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; 3.3.5&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/&#34;&gt;FontAwesome&lt;/a&gt; 4.4.0&lt;br /&gt;
アイコンフォント。ごく一部に使用。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/twitter/twemoji&#34;&gt;twemoji&lt;/a&gt; 1.3.2&lt;br /&gt;
ツイート内の絵文字を画像で表示する公式ライブラリ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stanlemon/jGrowl&#34;&gt;jGrowl&lt;/a&gt; 1.4.1&lt;br /&gt;
ツイートをグロール通知するライブラリ。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Node.jsでサーバー用スクリプトを書いて（サーバーサイド）、そのなかでHTMLファイルを表示する指示をする（クライアントサイド）という流れ。&lt;/p&gt;

&lt;p&gt;サーバーサイドのスクリプト（ここでは「server.js」）は以下のような感じ。&lt;br /&gt;
日本全体のポリゴン作成は&lt;a href=&#34;http://www.doogal.co.uk/polylines.php&#34;&gt;Google Maps and KML shapes generator&lt;/a&gt;を使用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var util = require(&#39;util&#39;);
var http = require(&#39;http&#39;);
var express = require(&#39;express&#39;);
var socketio = require(&#39;socket.io&#39;);
var twitter = require(&#39;twitter&#39;);
var twtext = require(&#39;twitter-text&#39;);
var polygon = require(&#39;point-in-polygon&#39;);

// 日本全体をおおまかに包含するポリゴンの座標
var poly_jp = [
  [23.94609601499837, 123.211669921875],
  [21.881889807629282, 128.287353515625],
  [26.22444694563432, 142.33062744140625],
  [46.56641407568593, 151.1663818359375],
  [45.78284835197676, 141.844482421875],
  [45.22848059584359, 138.680419921875],
  [34.88593094075317, 129.210205078125],
  [26.27371402440643, 123.299560546875],
  [24.587090339209634, 122.2833251953125],
  [23.94609601499837, 123.211669921875]
];


// サーバー起動
var app = express();
var server = http.createServer(app);

app.get(&#39;/&#39;, function (req, res) {
  res.sendFile(__dirname + &#39;/index.html&#39;);
});

var io = socketio.listen(server, {log: false});
server.listen(3000);



// Twitter APIの設定
var twit = new twitter({
  consumer_key: &#39;Twitter API の Consumer Key&#39;,
  consumer_secret: &#39;Twitter API の Consumer Secret&#39;,
  access_token_key: &#39;Twitter API の Access Token&#39;,
  access_token_secret: &#39;Twitter API の Access Token Secret&#39;
});

// Twitter Streaming APIでフィルタする範囲オプション
// （日本全体を含む矩形の南西の座標と北東の座標）
var option = {
    locations: &#39;123.283201,24.117224,150.625329,46.242887&#39;
};

// Streaming API開始
twit.stream(&#39;statuses/filter&#39;, option, function(stream) {
  stream.on(&#39;data&#39;, function (data) {
    // 座標つきツイート、かつポリゴン範囲内のもののみ抽出
    if (data.geo &amp;amp;&amp;amp; polygon(data.geo.coordinates, poly_jp)) {
        // ツイートテキストをHTML表示用に変換
        var formatted = twtext.autoLink(twtext.htmlEscape(data.text));

        // HTML側で使用するため新たに「text_formatted」というキー名にセット
        data.text_formatted = formatted;

        // Socket.IOで送出
        io.sockets.emit(&#39;msg&#39;, data);
    }
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;クライアントサイド（ここでは「index.html」）はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;TweetMap&amp;lt;/title&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&amp;quot;&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css&amp;quot;&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/jquery-jgrowl/1.4.1/jquery.jgrowl.min.css&amp;quot;&amp;gt;
  &amp;lt;style&amp;gt;
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
      overflow: hidden;
    }

    .jGrowl {
        color: #444;
    }

    .jGrowl-notification {
        background: #fff;
        box-shadow: 0 1px 3px rgba(0,0,0,.3);
    }

    .jGrowl-closer {
        color: #fff;
        background: #0275D8;
    }

    .tweet hr {
        margin: 7px 0;
        clear: both;
    }

    #map {
        width:100%;
        height: 100%;
        position:absolute;
        top:0;
        left:0;
    }
  &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;div id=&amp;quot;map&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script src=&amp;quot;/socket.io/socket.io.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/twemoji/1.3.2/twemoji.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/jquery-jgrowl/1.4.1/jquery.jgrowl.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
// Google Maps APIのコールバック関数
function initMap() {
  var currentWindow = null,
  markers = [],
  infowindows = [],
  markerCount = 0,
  markerMax = 1000,// マーカー最大数
  infowindowMax = 3;// フキダシ最大数

  var map = new google.maps.Map(document.getElementById(&#39;map&#39;), {
    center: {lat: 38.2586, lng: 137.6850},
    zoom: 7,
    zoomControlOptions: {
        position: google.maps.ControlPosition.LEFT_BOTTOM
    },
    streetViewControlOptions: {
        position: google.maps.ControlPosition.LEFT_BOTTOM
    }
  });

  // 日本を含む矩形をfitBoundsすることで、画面サイズに依らず日本の中心を表示
  map.fitBounds(new google.maps.LatLngBounds(
    new google.maps.LatLng(27.128750, 128.267736),
    new google.maps.LatLng(44.489597, 144.263829)
  ));

  // Socket.IOと接続
  var socket = io.connect();

  // Streaming APIからデータが来た際の処理
  socket.on(&#39;msg&#39;, function(data) {
    if (currentWindow) {
      currentWindow.close();
    }

    // ツイートテキスト（絵文字を変換）
    var tweet = twemoji.parse(data.text_formatted, {size:16});

    // グロールに表示するHTMLの組み立て
    var text = &#39;&amp;lt;div class=&amp;quot;tweet&amp;quot;&amp;gt;&#39;;
    text += &#39;&amp;lt;a href=&amp;quot;https://twitter.com/&#39; + data.user.screen_name + &#39;/statuses/&#39; + data.id_str + &#39;&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&#39;;
    text += &#39;&amp;lt;img src=&amp;quot;&#39; + data.user.profile_image_url_https + &#39;&amp;quot; width=&amp;quot;16&amp;quot;&amp;gt;&#39;;
    text += &#39; &amp;lt;strong&amp;gt;&#39; + data.user.screen_name + &#39;&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&#39;;
    text += &#39;&amp;lt;hr&amp;gt;&#39;;
    text += tweet;
    // 位置情報の名称があれば表示
    if (data.place &amp;amp;&amp;amp; data.place.name) {
        text += &#39;&amp;lt;hr&amp;gt;&amp;lt;i class=&amp;quot;fa fa-fw fa-map-marker text-danger&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;a href=&amp;quot;https://twitter.com/search?q=place%&#39; + data.place.id + &#39;&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&#39; + data.place.name + &#39;&amp;lt;/a&amp;gt;&#39;;
    }
    text += &#39;&amp;lt;/div&amp;gt;&#39;;

    // グロールを表示
    $.jGrowl(text, {
        life: 10000
    });

    // 地図マーカーのフキダシ
    var infowindow = new google.maps.InfoWindow({
      content: &#39;&amp;lt;div&amp;gt;&#39; + tweet + &#39;&amp;lt;/div&amp;gt;&#39;,
      maxWidth: 200,
      disableAutoPan: true
    });

    infowindows.push(infowindow);

    // 地図マーカー
    var marker = new google.maps.Marker({
      map: map,
      position: new google.maps.LatLng(data.geo.coordinates[0], data.geo.coordinates[1]),
      animation: google.maps.Animation.DROP,
      title: &#39;@&#39; + data.user.screen_name
    });

    marker.infowindow = infowindow;

    // マーカーをクリックしたらフキダシ表示
    marker.addListener(&#39;click&#39;, function() {
      this.infowindow.open(map, this);
    });

    // デフォルトでフキダシを開く
    infowindow.open(map, marker);

    markers.push(marker);

    // ウインドウが最大数になったら前のものを閉じる
    if (markerCount &amp;gt;= infowindowMax) {
      var cls = markerCount - infowindowMax;
      infowindows[cls].close();
    }

    // マーカー数を記録
    markerCount++;

    // マーカーが最大数になったら徐々に透明になっていく（10段階）
    if (markerCount &amp;gt; markerMax) {
      var fade = (markerCount + 1) - markerMax;
      markers[fade].setOpacity(0.9);

      fade--;
      if (markers[fade]) {
        markers[fade].setOpacity(0.8);
        fade--;
        if (markers[fade]) {
          markers[fade].setOpacity(0.7);
          fade--;
          if (markers[fade]) {
            markers[fade].setOpacity(0.6);
            if (markers[fade]) {
              markers[fade].setOpacity(0.5);
              fade--;
              if (markers[fade]) {
                markers[fade].setOpacity(0.4);
                fade--;
                if (markers[fade]) {
                  markers[fade].setOpacity(0.3);
                  fade--;
                  if (markers[fade]) {
                    markers[fade].setOpacity(0.2);
                    fade--;
                    if (markers[fade]) {
                      markers[fade].setOpacity(0.1);
                      fade--;
                      if (markers[fade]) {
                        markers[fade].setMap(null);
                        markers[fade] = null;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  });
}
&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//maps.googleapis.com/maps/api/js?v=3.exp&amp;amp;sensor=false&amp;amp;callback=initMap&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記2ファイルを同ディレクトリに置いたら、そこで以下を実行してサーバーを起動。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コマンドには何も表示されないけど実行されているので、 &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; にアクセスしてみると動いている。&lt;br /&gt;
サーバーを止める場合は&lt;kbd&gt;Ctrl&lt;/kbd&gt;＋&lt;kbd&gt;C&lt;/kbd&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cloud9を自サーバにインストールしてどこでもコーディング</title>
      <link>https://kijtra.com/article/cloud9-install</link>
      <pubDate>Mon, 14 Sep 2015 12:45:29 +0900</pubDate>
      
      <guid>https://kijtra.com/article/cloud9-install</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://c9.io/&#34;&gt;Cloud9&lt;/a&gt; はWebサービスとして提供されているオンラインIDEだけど、オープンソースなので自前のサーバー（さくらVPS等）にインストールしても使うことができるため、なんとなく使ってみた。&lt;/p&gt;

&lt;p&gt;今回は &lt;a href=&#34;http://vps.sakura.ad.jp/&#34;&gt;さくらインターネットのVPS&lt;/a&gt; で最安の 512プラン を持っていたので、そこで使ってみた。&lt;br /&gt;
OSは &lt;strong&gt;CentOS 6.7&lt;/strong&gt; ( &lt;code&gt;yum -update&lt;/code&gt; により6.6から6.7になった)。&lt;/p&gt;

&lt;p&gt;自前インストールだと &lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js&lt;/a&gt; を使ってコマンドによりサーバーを立ち上げ、そこにアクセスして使うことになる。&lt;br /&gt;
でも使うたびに毎回サーバーを起動する必要があるので、最終的には &lt;strong&gt;立ち上げっぱなし&lt;/strong&gt; の状態にし、さらに &lt;strong&gt;サブドメイン下で動くように&lt;/strong&gt; したい。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cloud9 SDK の公式Github&lt;br /&gt;
&lt;a href=&#34;https://github.com/c9/core/&#34;&gt;https://github.com/c9/core/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://lh3.googleusercontent.com/sJkFA7FXA0NoXg3L6nK5tszj1Mo1exn6wn0DylP_cKXCK6mnH9yEikIisIToRDjgYacUssjmIUBmQFsxExSTK6HGt2WUNSh4SVLOzGx3VdSUeIYJdmlDJIY-2TSIhwsUJiqWRhdju6cN-6eHjuZAtpj9tfTChKDnHases-DDK5aMcpficANwno5vwVyAEDivDCUiW_uRrWAH-uK8iGw05t6oz4Xi1zo2fW5H6jlWEmMBRDcI5a0N3LLxVT_KxyY7RKm_C76gwv3dNrfOHsafcBKGn3Hpbyhuyp9LBcv5VaabeIrsQAa3ULZNMbN2uKp6TKiWHsPU1cyrDeGqeGM3IOA1y7uhuZmRz_WN3OceswzSvUfE8TMdJ72BK_b-n5hucyO4466nTipMXBn2jORQUUAu-ARJ6yvqhIJY7QcowNcYpYDlAgDNriSKIJl1aA_PJhGEHDIDCDA8xs7zNIvAjGfvAWE7tIR3Hh0omGFklKKgxOlFIfOPX-V4FCQ6y289Gnz1HLEHZOXnnaT561srStyPp1OuqwrEydwWqeWEzm4=w1460-h659-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/sJkFA7FXA0NoXg3L6nK5tszj1Mo1exn6wn0DylP_cKXCK6mnH9yEikIisIToRDjgYacUssjmIUBmQFsxExSTK6HGt2WUNSh4SVLOzGx3VdSUeIYJdmlDJIY-2TSIhwsUJiqWRhdju6cN-6eHjuZAtpj9tfTChKDnHases-DDK5aMcpficANwno5vwVyAEDivDCUiW_uRrWAH-uK8iGw05t6oz4Xi1zo2fW5H6jlWEmMBRDcI5a0N3LLxVT_KxyY7RKm_C76gwv3dNrfOHsafcBKGn3Hpbyhuyp9LBcv5VaabeIrsQAa3ULZNMbN2uKp6TKiWHsPU1cyrDeGqeGM3IOA1y7uhuZmRz_WN3OceswzSvUfE8TMdJ72BK_b-n5hucyO4466nTipMXBn2jORQUUAu-ARJ6yvqhIJY7QcowNcYpYDlAgDNriSKIJl1aA_PJhGEHDIDCDA8xs7zNIvAjGfvAWE7tIR3Hh0omGFklKKgxOlFIfOPX-V4FCQ6y289Gnz1HLEHZOXnnaT561srStyPp1OuqwrEydwWqeWEzm4=w766-h345-no&#34; alt=&#34;Cloud9動作イメージ&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;必要なライブラリ等のインストール:e51332a40e06a9b8f867644b6f70fb4d&#34;&gt;必要なライブラリ等のインストール&lt;/h2&gt;

&lt;p&gt;Cloud9 のインストールに最低限必要なのは &lt;strong&gt;Python2.7以上&lt;/strong&gt; と &lt;strong&gt;glibc-static&lt;/strong&gt; というyumパッケージ。&lt;br /&gt;
その2つをインストールする。&lt;br /&gt;
※ Node.js周りのものはCloud9インストーラが勝手に入れてくれるので、自分で入れなくても良い&lt;/p&gt;

&lt;p&gt;まずは glibc-static 。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo yum install glibc-static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次にPython。&lt;br /&gt;
少し手順が多いので下項で。&lt;/p&gt;

&lt;h3 id=&#34;python2-7-9のインストール:e51332a40e06a9b8f867644b6f70fb4d&#34;&gt;Python2.7.9のインストール&lt;/h3&gt;

&lt;p&gt;CentOS6 の yum リポジトリには Python2.6 までしかないため、どうしてもソースからインストールする必要がある。&lt;br /&gt;
また、すでに入っている Python2.6.6 はそのままにして、2.7 を別でインストールすることになる。&lt;/p&gt;

&lt;p&gt;いくつか調べると以下のサイト（英語）のインストール方法が一般的なようなので、基本的にこの通りにする。&lt;br /&gt;
&lt;a href=&#34;http://toomuchdata.com/2014/02/16/how-to-install-python-on-centos/&#34;&gt;http://toomuchdata.com/2014/02/16/how-to-install-python-on-centos/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まず必須ライブラリのインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo yum groupinstall &amp;quot;Development tools&amp;quot;
sudo yum install wget zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記参考サイトでは &lt;code&gt;wget&lt;/code&gt; が入っていないので追加している。（後ほど使うため）&lt;br /&gt;
また、ウチの環境では &lt;code&gt;yum groupinstall &amp;quot;Development tools&amp;quot;&lt;/code&gt; が、以下のようなメッセージが出て動かないような感じだった。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning: Group development does not have any packages.&lt;br /&gt;
No packages in any requested group available to install or update&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;それでもまあ最終的にCloud9を使えてるのでよしとするw&lt;/p&gt;

&lt;p&gt;次にライブラリのパスを設定する。&lt;br /&gt;
CentOS6 では、デフォルトで &lt;code&gt;/usr/bin/python&lt;/code&gt; にパスが通っているけど、Python2.7は &lt;code&gt;/usr/local/bin/python2.7&lt;/code&gt; というパスにインストールされる。&lt;br /&gt;
そのためPythonライブラリ群のパスを指定する必要があるらしく、 &lt;code&gt;/etc/ld.so.conf&lt;/code&gt; というファイルを編集する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo vi /etc/ld.so.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のように記述する。（2行目が追記した部分）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;include ld.so.conf.d/*.conf
/usr/local/lib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の設定を反映するコマンド。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo /sbin/ldconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次にPythonのソースをダウンロードしてインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget http://python.org/ftp/python/2.7.9/Python-2.7.9.tar.xz
tar xf Python-2.7.9.tar.xz
cd Python-2.7.9
./configure --prefix=/usr/local --enable-unicode=ucs4 --enable-shared
make
sudo make altinstall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後の &lt;code&gt;altinstall&lt;/code&gt; が、Python2.6.6 とは別にインストールするという指示らしい。&lt;br /&gt;
わりと時間がかかるけど、終わったら念のためもう一度パス設定を反映する。&lt;br /&gt;
（これをやらないとパスが通らないことがあった）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo /sbin/ldconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールされたか確認&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python2.7 -V
# 「Python 2.7.9」と出ればOK
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cloud9-sdk-のインストール:e51332a40e06a9b8f867644b6f70fb4d&#34;&gt;Cloud9 SDK のインストール&lt;/h2&gt;

&lt;p&gt;手順は簡単だけど、注意点としては &lt;strong&gt;root権限ではインストールできない&lt;/strong&gt; という点。&lt;br /&gt;
&lt;code&gt;sudo -s&lt;/code&gt; とか &lt;code&gt;su -&lt;/code&gt; とかでrootに成っている場合は一般ユーザーに切り替える。&lt;/p&gt;

&lt;p&gt;その &lt;strong&gt;一般ユーザーのルートディレクトリでインストールする&lt;/strong&gt; ので、ディレクトリ移動。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それと、もう一つ注意点としてシェルが日本語になっているとうまくいかない。&lt;br /&gt;
念のため確認して英語にしておく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo vi /etc/sysconfig/i18n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のように記述&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;LANG=&amp;quot;en_US.UTF-8&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;やっと本体インストール。&lt;br /&gt;
GitでSDKを &lt;code&gt;c9sdk&lt;/code&gt; というディレクトリにダウンロードする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone git://github.com/c9/core.git c9sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ダウンロードフォルダに移動して・・・&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd c9sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストーラを実行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scripts/install-sdk.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これもかなり時間がかかるけど、成功すると以下のようなメッセージが出る。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Success!
run &amp;lsquo;node server.js -p 8080 -a :&amp;rsquo; to launch Cloud9&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;node server.js -p 8080 -a :&lt;/code&gt; というコマンドで立ち上げできるよ！というメッセージだけど、今はまだ無視。&lt;/p&gt;

&lt;h2 id=&#34;サブドメインでアクセスできるようにする:e51332a40e06a9b8f867644b6f70fb4d&#34;&gt;サブドメインでアクセスできるようにする&lt;/h2&gt;

&lt;p&gt;Cloud9を立ち上げると、そのままでは &lt;strong&gt;&lt;a href=&#34;http://XXX.XXX.XXX.XXX:8080&#34;&gt;http://XXX.XXX.XXX.XXX:8080&lt;/a&gt;&lt;/strong&gt; というようなアドレスでしかアクセスできない。&lt;br /&gt;
なので、&lt;strong&gt;&lt;a href=&#34;http://c9.example.com&#34;&gt;http://c9.example.com&lt;/a&gt;&lt;/strong&gt; といったURLでアクセスできるようにする。&lt;/p&gt;

&lt;h3 id=&#34;apacheの場合:e51332a40e06a9b8f867644b6f70fb4d&#34;&gt;Apacheの場合&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;&amp;lt;VirtualHost *:80&amp;gt;
    ServerName c9.example.com
    ProxyPass / http://127.0.0.1:8080/
    ProxyPassReverse / http://127.0.0.1:8080/
    ProxyPreserveHost On
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;nginxの場合:e51332a40e06a9b8f867644b6f70fb4d&#34;&gt;Nginxの場合&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {
    listen       80;
    server_name  c9.example.com;

    location / {
        proxy_pass   http://127.0.0.1:8080;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cloud9-ide-起動:e51332a40e06a9b8f867644b6f70fb4d&#34;&gt;Cloud9 IDE、起動！&lt;/h2&gt;

&lt;p&gt;ここまでがわりと長い・・・。&lt;/p&gt;

&lt;p&gt;起動コマンドは以下のような感じ。&lt;br /&gt;
オプションについては&lt;a href=&#34;https://github.com/c9/core/#starting-cloud9&#34;&gt;公式GitHubに説明がある&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;node ~/c9sdk/server.js -p 8080 -w ~/public/ -a username:password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ひとつずつ説明すると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;node&lt;/code&gt;&lt;/strong&gt; ・・・ Node.js使用コマンド&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;~/c9sdk/server.js&lt;/code&gt;&lt;/strong&gt; ・・・ サーバー起動スクリプト&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-p 8080&lt;/code&gt;&lt;/strong&gt; ・・・ 使用するポート&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-w ~/public/&lt;/code&gt;&lt;/strong&gt; ・・・ 「~/public/」以下のディレクトリがCloud9管理対象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-a username:password&lt;/code&gt;&lt;/strong&gt; ・・・ Basic認証する場合の ID:パスワード&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったコマンド。&lt;br /&gt;
これで &lt;code&gt;http://c9.example.com&lt;/code&gt; にアクセスするとIDEが起動するはず。&lt;/p&gt;

&lt;p&gt;ちなみに編集権限のないディレクトリ内のは当然編集できない。&lt;br /&gt;
なので、サーバーの別ユーザーのディレクトリを編集したい場合は、そのユーザーでログインしてCloud9をインストールする必要がある。&lt;/p&gt;

&lt;p&gt;ちなみにIDEの設定などは &lt;code&gt;~/.c9/&lt;/code&gt; というディレクトリに保存される。&lt;br /&gt;
SASS とか LESS とかの &lt;a href=&#34;https://cloud9-sdk.readme.io/docs/builders&#34;&gt;Builderスクリプト&lt;/a&gt; とか使う場合はそこに設定ファイルを保存することになる。&lt;/p&gt;

&lt;p&gt;起動が確認できたら、いったんサーバーを落として（&lt;kbd&gt;Ctrl + C&lt;/kbd&gt;）、下記立ち上げっぱなしにする設定に進む。&lt;/p&gt;

&lt;h2 id=&#34;node-forever-で立ち上げっぱなしにする:e51332a40e06a9b8f867644b6f70fb4d&#34;&gt;「node forever」で立ち上げっぱなしにする&lt;/h2&gt;

&lt;p&gt;npmが入っていない場合は入れる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo yum install npm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;forever をグローバルインストールする。&lt;br /&gt;
（グローバルである必要はない）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo npm install forever -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;forever を使って Cloud9 IDE を起動&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;forever start ~/c9sdk/server.js -w /home/kijtra/public/dev -p 8080 -a username:password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のように出れば起動中。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;info: Forever processing file: /home/example/c9sdk/server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行中ものをの表示したい場合&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;forever list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cloud9 IDE を停止する場合&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;forever stop ~/c9sdk/server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;以上だけど、Pythonのインストールあたりからわりと試行錯誤でやっと成功した感じ。&lt;br /&gt;
&lt;a href=&#34;https://virtualenv.pypa.io/en/latest/&#34;&gt;virtualenv&lt;/a&gt; とか使ったりしたけど、うまくいかなかった。&lt;br /&gt;
また、Cloud9自体が使っている人がほとんどいないので苦労した。&lt;br /&gt;
でも &lt;a href=&#34;http://sass-lang.com/&#34;&gt;SASS&lt;/a&gt; や &lt;a href=&#34;http://lesscss.org/&#34;&gt;LESS&lt;/a&gt; 、&lt;a href=&#34;http://coffeescript.org/&#34;&gt;CofeeScript&lt;/a&gt; のコンパイルができて、しかも &lt;strong&gt;&lt;a href=&#34;http://emmet.io/&#34;&gt;Emmet&lt;/a&gt;&lt;/strong&gt; にも対応しているのはびっくりした。&lt;br /&gt;
「SublimeText Mode」なるものもあり、見た目や動作を &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;SublimeText&lt;/a&gt; そっくりにすることもできる。&lt;br /&gt;
個人サイトなんかはすべてブラウザで完結できそう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Trello の Webhook API をPHPで受け取ってみた</title>
      <link>https://kijtra.com/article/trello-webhook-api-php</link>
      <pubDate>Mon, 10 Aug 2015 14:18:14 +0900</pubDate>
      
      <guid>https://kijtra.com/article/trello-webhook-api-php</guid>
      <description>

&lt;p&gt;タスク管理ツール「&lt;a href=&#34;https://trello.com&#34;&gt;Trello&lt;/a&gt;」のAPIに &lt;strong&gt;&lt;a href=&#34;https://trello.com/docs/gettingstarted/webhooks.html&#34;&gt;Webhook&lt;/a&gt;&lt;/strong&gt; というものがありまして、更新を任意のURLにリアルタイムでプッシュ通知してくれるという非常に便利なAPIなのです。&lt;br /&gt;
わりと日本語の紹介記事などがなかったのでメモ。&lt;/p&gt;

&lt;h2 id=&#34;まずはapiキーをゲット:dd9a2a9a39136ba3e8aa23709ee43d4b&#34;&gt;まずはAPIキーをゲット&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://trello.com&#34;&gt;Trello&lt;/a&gt;にログインし、以下のURLにアクセス。&lt;br /&gt;
&lt;strong&gt;&lt;a href=&#34;https://trello.com/app-key&#34;&gt;https://trello.com/app-key&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以下のようにAPIキーとAPIシークレットが表示される。&lt;br /&gt;
&lt;a href=&#34;https://lh3.googleusercontent.com/yrhpTzAWFtwGLiNbqh4izus7UyYYg94RkZCUx90_te8=w623-h238-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/yrhpTzAWFtwGLiNbqh4izus7UyYYg94RkZCUx90_te8=w623-h238-no&#34; alt=&#34;TrelloのAPIキー画面&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;アクセストークンをゲット:dd9a2a9a39136ba3e8aa23709ee43d4b&#34;&gt;アクセストークンをゲット&lt;/h2&gt;

&lt;p&gt;APIキーを使って以下のURLにアクセスすると、認証画面が出るので「&lt;strong&gt;Allow&lt;/strong&gt;」で許可する。&lt;br /&gt;
&lt;strong&gt;&lt;a href=&#34;https://trello.com/1/authorize?key=[APIキー]&amp;amp;expiration=never&amp;amp;response_type=token&amp;amp;scope=read,write&#34;&gt;https://trello.com/1/authorize?key=[APIキー]&amp;amp;expiration=never&amp;amp;response_type=token&amp;amp;scope=read,write&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://lh3.googleusercontent.com/Wtu80Fz60Aq6yHtZMbJQyU_wXn6Z7nDqlORqdV8TJiA=w590-h585-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/Wtu80Fz60Aq6yHtZMbJQyU_wXn6Z7nDqlORqdV8TJiA=w590-h585-no&#34; alt=&#34;Trelloの認証画面&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;すると以下のようにトークン文字が表示されるので、どこかに保存しておく。&lt;br /&gt;
&lt;a href=&#34;https://lh3.googleusercontent.com/8oEK4Zdsq5P9NqEMXbx6oVSFwdqZ0f16sLnd0PVjWfU=w457-h102-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/8oEK4Zdsq5P9NqEMXbx6oVSFwdqZ0f16sLnd0PVjWfU=w457-h102-no&#34; alt=&#34;Trelloのアクセストークン表示&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ライブラリを使う:dd9a2a9a39136ba3e8aa23709ee43d4b&#34;&gt;ライブラリを使う&lt;/h2&gt;

&lt;p&gt;Trello APIを使うのに便利なライブラリを取得しておく。&lt;br /&gt;
個人的には以下のものを使ってる。（&lt;a href=&#34;https://github.com/cdaguerre/php-trello-api/blob/master/docs/Api/Index.md&#34;&gt;公式ドキュメントはこちら&lt;/a&gt;）&lt;br /&gt;
&lt;strong&gt;&lt;a href=&#34;https://github.com/cdaguerre/php-trello-api&#34;&gt;cdaguerre/php-trello-api&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Composerでインストール&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer.phar require cdaguerre/php-trello-api:@dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ボードのidを取得する:dd9a2a9a39136ba3e8aa23709ee43d4b&#34;&gt;ボードのIDを取得する&lt;/h2&gt;

&lt;p&gt;Webhookを作る際に通知を受け取るボードのIDが必要になるので、自分のボード一覧を見て確認しておく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
include(__DIR__.&#39;/vendor/autoload.php&#39;);

$api_key = &#39;取得したAPIキー&#39;;
$access_token = &#39;取得したアクセストークン&#39;;

// cdaguerre/php-trello-api ライブラリの名前空間
use Trello\Client;

// APIクライアントのインスタンス作成
$client = new Client();

// APIキーとトークンで認証
$client-&amp;gt;authenticate($api_key, $access_token, Client::AUTH_URL_CLIENT_ID);

// 自分のボード一覧を取得
// ※「ユーザーID」はログイン時のユーザーID。
$boards = $client-&amp;gt;members()-&amp;gt;boards()-&amp;gt;all(&#39;ユーザーID&#39;);

// 表示
var_dump($boards);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行すると、以下のようなデータが表示される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;array(9) {
  [0]=&amp;gt;
  array(21) {
    [&amp;quot;name&amp;quot;]=&amp;gt;
    string(7) &amp;quot;ボード名&amp;quot;
    [&amp;quot;desc&amp;quot;]=&amp;gt;
    string(0) &amp;quot;&amp;quot;
    [&amp;quot;descData&amp;quot;]=&amp;gt;
    NULL
    [&amp;quot;closed&amp;quot;]=&amp;gt;
    bool(true)
    [&amp;quot;idOrganization&amp;quot;]=&amp;gt;
    NULL
    [&amp;quot;pinned&amp;quot;]=&amp;gt;
    NULL
    [&amp;quot;invitations&amp;quot;]=&amp;gt;
    NULL
    [&amp;quot;shortLink&amp;quot;]=&amp;gt;
    string(8) &amp;quot;xxxxxxxx&amp;quot;
    [&amp;quot;powerUps&amp;quot;]=&amp;gt;
    NULL
    [&amp;quot;dateLastActivity&amp;quot;]=&amp;gt;
    string(24) &amp;quot;0000-00-00T00:00:00.000Z&amp;quot;
    [&amp;quot;idTags&amp;quot;]=&amp;gt;
    array(0) {
    }
    [&amp;quot;id&amp;quot;]=&amp;gt;
    string(24) &amp;quot;123456789abcdefghijklmno&amp;quot; // ★ここのIDが必要
    [&amp;quot;invited&amp;quot;]=&amp;gt;
    bool(false)
    [&amp;quot;starred&amp;quot;]=&amp;gt;
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;webhook-を作る:dd9a2a9a39136ba3e8aa23709ee43d4b&#34;&gt;Webhook を作る&lt;/h2&gt;

&lt;p&gt;Webhookを受信するURLを設定する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://trello.com/docs/gettingstarted/webhooks.html&#34;&gt;Trello公式のAPIドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cdaguerre/php-trello-api/blob/master/docs/Api/Webhook.md&#34;&gt;cdaguerre/php-trello-api ライブラリの Webhook ドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
include(__DIR__.&#39;/vendor/autoload.php&#39;);

$api_key = &#39;取得したAPIキー&#39;;
$access_token = &#39;取得したアクセストークン&#39;;

// cdaguerre/php-trello-api ライブラリの名前空間
use Trello\Client;

// APIクライアントのインスタンス作成
$client = new Client();

// APIキーとトークンで認証
$client-&amp;gt;authenticate($api_key, $access_token, Client::AUTH_URL_CLIENT_ID);

// Webhookを作成
$hook = array(
    &#39;description&#39; =&amp;gt; &#39;My First Webhook!&#39;,
    &#39;callbackURL&#39; =&amp;gt; &#39;http://example.com/trelloCallback.php&#39;,
    &#39;idModel&#39; =&amp;gt; &#39;ボードのID&#39;,
);
$webhooks = $client-&amp;gt;webhooks()-&amp;gt;create($hook);
var_dump($webhooks);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記を実行すると、以下のようなレスポンスが表示される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;array(5) {
  [&amp;quot;id&amp;quot;]=&amp;gt;
  string(24) &amp;quot;123456789abcdefghijklmno&amp;quot;
  [&amp;quot;description&amp;quot;]=&amp;gt;
  string(17) &amp;quot;My First Webhook!&amp;quot;
  [&amp;quot;idModel&amp;quot;]=&amp;gt;
  string(24) &amp;quot;ボードのID&amp;quot;
  [&amp;quot;callbackURL&amp;quot;]=&amp;gt;
  string(48) &amp;quot;http://example.com/trelloCallback.php&amp;quot;
  [&amp;quot;active&amp;quot;]=&amp;gt;
  bool(true)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで Webhook を送信する準備は完了。&lt;/p&gt;

&lt;p&gt;ちなみに作成した Webhook の一覧は以下のURLで確認できる。&lt;br /&gt;
&lt;a href=&#34;https://trello.com/1/tokens/[アクセストークン]/webhooks/?key=[APIキー&#34;&gt;https://trello.com/1/tokens/[アクセストークン]/webhooks/?key=[APIキー&lt;/a&gt;]&lt;/p&gt;

&lt;h2 id=&#34;通知を受け取るphpを作成:dd9a2a9a39136ba3e8aa23709ee43d4b&#34;&gt;通知を受け取るPHPを作成&lt;/h2&gt;

&lt;p&gt;データはリクエストボディにJSON形式でPOSTされる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
if (&#39;POST&#39; == $_SERVER[&#39;REQUEST_METHOD&#39;] &amp;amp;&amp;amp; isset($_SERVER[&#39;HTTP_X_TRELLO_WEBHOOK&#39;])) {
    $body = file_get_contents(&amp;quot;php://input&amp;quot;);
    if (!empty($body)) {
        $json = json_decode($body);

        // ... あとはご自由に ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;HTTP_X_TRELLO_WEBHOOK&lt;/code&gt; については、Webhook からのリクエストかどうかを検証するためのハッシュ値がセットされているんだけど、&lt;a href=&#34;https://trello.com/docs/gettingstarted/webhooks.html#triggering-webhooks&#34;&gt;公式ドキュメント&lt;/a&gt;に倣ってPHPの &lt;code&gt;hash_hmac&lt;/code&gt; 関数を使って検証してみたけどうまくいかなかった・・・。&lt;br /&gt;
なので、&lt;code&gt;HTTP_X_TRELLO_WEBHOOK&lt;/code&gt; が存在するかどうかだけ検証してる。&lt;br /&gt;
ちなみに検証用に作ったコードはこちら。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
function verifyTrelloWebhookRequest($body, $secret, $callbackURL, $header) {
    $base64Digest = function($s) use($secret) {
        $s = hash_hmac(&#39;sha1&#39;, $s, $secret, true);
        $s = base64_encode($s);
        return $s;
    };

    $content = $body + $callbackURL;
    $doubleHash = $base64Digest($base64Digest($content));
    $headerHash = $base64Digest($header);

    return ($doubleHash == $headerHash);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ページ移動時にフォームの内容に変更があれば警告を出すアレ</title>
      <link>https://kijtra.com/article/watch-form-input-change</link>
      <pubDate>Fri, 03 Jul 2015 16:20:45 +0900</pubDate>
      
      <guid>https://kijtra.com/article/watch-form-input-change</guid>
      <description>&lt;p&gt;ページの移動や更新の時、フォームの入力内容に変更があった場合に「&lt;strong&gt;移動してよろしいですか？&lt;/strong&gt;」みたいな警告が出るのをたまに見る。（アレなんか名前があるのかな…？）&lt;br /&gt;
jQueryでシンプルに作れそうだったので作ってみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(function($) {
    // 警告のメッセージ
    var message = &#39;入力内容が一部変更済みです&#39;;

    // 対象フォーム格納用jQueryオブジェクト
    var forms = $();

    // デフォルト値
    var defaults = &#39;&#39;;

    // window.beforeunload適用済みかどうかのフラグ
    var initialized = false;

    // フォームでのSubmit時だけは警告を出さないためのフラグ
    var submit = false;

    // プラグイン本体
    $.fn.watchInputChange = function(options) {
        var form = this;

        $(function() {
            // Submit時にフラグを立てる
            form.on(&#39;submit.wic&#39;, function() {
                submit = true;
                // Ajaxフォームの場合はonBeforeUnloadが動かないので
                // 0.5秒後に元に戻す（ビミョー実装）
                setTimeout(function() {
                    submit = false;
                }, 500);
            });

            // 対象フォームをjQueryオブジェクトに追加
            forms = forms.add(form);

            // デフォルト値をセット
            defaults = forms.serialize();

            // window.beforeunload適用（初回のみ）
            if (!initialized) {
                initialized = true;
                $(window).on(&#39;beforeunload.wic&#39;, function() {
                    // フォームでのSubmitの場合は無視
                    if (submit) {
                        submit = false;
                        return;
                    }

                    // 対象フォームの現データとデフォルト値を比較
                    if (forms.serialize() !== defaults) {
                        // 違いがあればメッセージ表示
                        return message;
                    }
                });
            }
        });

        return forms;
    };
})(jQuery);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;onBeforeUnload&lt;/code&gt; で旧フォーム内容と比較してるだけ。&lt;br /&gt;
使い方は以下のようなかんじ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form&amp;gt;
    ...フォーム内容...
&amp;lt;/form&amp;gt;

&amp;lt;form&amp;gt;
    ...複数フォームもOK...
&amp;lt;/form&amp;gt;

&amp;lt;script src=&amp;quot;jQueryのパス&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
$(&#39;form&#39;).watchInputChange();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ページを離れるケースとしては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;リンクで遷移&lt;/li&gt;
&lt;li&gt;戻るボタン&lt;/li&gt;
&lt;li&gt;リロード&lt;/li&gt;
&lt;li&gt;ウインドウまたはタブを閉じる&lt;/li&gt;
&lt;li&gt;フォーム送信&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったところなんだけど、フォーム送信で発火するとウザいので onSubmit 時にフラグを立ててなんとかする必要があった。&lt;br /&gt;
しかもAjax仕様のフォームの場合、ページ遷移がなくフラグが立ったままになってしまうため、 &lt;code&gt;setTimeout&lt;/code&gt; で強引に戻してる・・・&lt;br /&gt;
このあたりはうまい方法が思いつかなかった。&lt;/p&gt;

&lt;p&gt;あとたぶんIE9以上なら大丈夫だと思う。&lt;br /&gt;
IE8以下はたしか onBeforeUnload が効かなかったような。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>旧暦や六曜など日付に関する情報を取得できるAPIを作ってみた</title>
      <link>https://kijtra.com/article/date-info-api-v1</link>
      <pubDate>Fri, 19 Jun 2015 15:08:36 +0900</pubDate>
      
      <guid>https://kijtra.com/article/date-info-api-v1</guid>
      <description>

&lt;p&gt;指定した日付に関する様々な（「今日は何の日」的な）情報を取得するシンプルなAPIを（自分のために）作ってみた。&lt;/p&gt;

&lt;p&gt;例えば「今日の六曜（大安とかそういうの）は？」といった場合、まずは旧暦の日付を求める必要がある。&lt;br /&gt;
&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E6%97%A7%E6%9A%A6#.E3.80.8C.E6.97.A7.E6.9A.A6.E3.80.8D.E3.81.AE.E8.A8.88.E7.AE.97&#34;&gt;旧暦の計算&lt;/a&gt;なんかはすごく面倒くさいため、単に六曜を表示するだけでも大掛かりっぽくなってしまう。&lt;br /&gt;
しかもそういったAPIがみつからなかったので、もう作ってしまえということで。&lt;/p&gt;

&lt;h2 id=&#34;エンドポイント:855a73b9cbbdda0a2bfb5acab02a8dc0&#34;&gt;エンドポイント&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;https://dateinfoapi.appspot.com/v1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;「http」（「s」なし）でもOK。&lt;/p&gt;

&lt;h2 id=&#34;リクエストパラメータ:855a73b9cbbdda0a2bfb5acab02a8dc0&#34;&gt;リクエストパラメータ&lt;/h2&gt;

&lt;p&gt;JSONPを使用しない場合、Access-Control-Allow-Originを &lt;code&gt;*&lt;/code&gt; に設定しているため直接取得できると思います。&lt;/p&gt;

&lt;div class=&#34;table&#34;&gt;
    &lt;table&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th&gt;パラメータ&lt;/th&gt;
                &lt;th&gt;説明&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;th class=&#34;w30&#34;&gt;date&lt;/th&gt;
                &lt;td&gt;
                    日付 （例）2015-06-19&lt;br&gt;
                    省略時は現在の日になります。
                    &lt;div class=&#34;help&#34;&gt;
                        ※ Pythonの &lt;a href=&#34;https://dateutil.readthedocs.org/en/latest/&#34;&gt;dateutil&lt;/a&gt;ライブラリを使用しているので、dateutilライブラリが&lt;a href=&#34;https://dateutil.readthedocs.org/en/latest/examples.html#parse-examples&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;パースできる形式&lt;/a&gt;ならなんでもOKです。&lt;br&gt;
                        ※ 1900年以降にしか対応していません。
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th class=&#34;w30&#34;&gt;callback&lt;/th&gt;
                &lt;td&gt;
                    JSONPで取得する際に使用してください
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;

&lt;h3 id=&#34;リクエスト例:855a73b9cbbdda0a2bfb5acab02a8dc0&#34;&gt;リクエスト例&lt;/h3&gt;

&lt;p&gt;通常&lt;br /&gt;
&lt;a href=&#34;https://dateinfoapi.appspot.com/v1?date=2015-06-19&#34;&gt;&lt;code&gt;https://dateinfoapi.appspot.com/v1?date=2015-06-19&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JSONPの場合&lt;br /&gt;
&lt;a href=&#34;https://dateinfoapi.appspot.com/v1?date=2015-06-19&amp;amp;callback=function_name&#34;&gt;&lt;code&gt;https://dateinfoapi.appspot.com/v1?date=2015-06-19&amp;amp;callback=function_name&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;レスポンスパラメータ:855a73b9cbbdda0a2bfb5acab02a8dc0&#34;&gt;レスポンスパラメータ&lt;/h2&gt;

&lt;p&gt;レスポンスのフォーマットはJSONのみです。値がない場合は &lt;code&gt;null&lt;/code&gt; が入ります。&lt;/p&gt;

&lt;div class=&#34;table&#34;&gt;
    &lt;table&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th&gt;パラメータ&lt;/th&gt;
                &lt;th&gt;型&lt;/th&gt;
                &lt;th&gt;説明&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;century&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;integer&lt;/td&gt;
                &lt;td&gt;
                    指定日が何世紀か
                    &lt;div class=&#34;help&#34;&gt;
                        （例）21
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;date&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の日付&lt;small&gt;（YYYY-MM-DD形式）&lt;/small&gt;
                    &lt;div class=&#34;help&#34;&gt;
                        （例）2015-06-19
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;date_ja&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の日本語の日付&lt;small&gt;（YYYY年M月D日(W)形式）&lt;/small&gt;
                    &lt;div class=&#34;help&#34;&gt;
                        （例）2015年6月19日(金)
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;day&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;integer&lt;/td&gt;
                &lt;td&gt;
                    指定日の日
                    &lt;div class=&#34;help&#34;&gt;
                        （例）19
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;eto&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の干支
                    &lt;div class=&#34;help&#34;&gt;
                        （例）未
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;eto_kana&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の干支のよみがな
                    &lt;div class=&#34;help&#34;&gt;
                        （例）ひつじ
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;gengo&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の元号
                    &lt;div class=&#34;help&#34;&gt;
                        （例）平成
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;gengo_full&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の元号に年を加えたもの
                    &lt;div class=&#34;help&#34;&gt;
                        （例）平成27年
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;holiday&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日が&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%9B%BD%E6%B0%91%E3%81%AE%E4%BC%91%E6%97%A5&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;国民の休日&lt;/a&gt;の場合はその名称
                    &lt;div class=&#34;help&#34;&gt;
                        （例）みどりの日
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;julian&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;float&lt;/td&gt;
                &lt;td&gt;
                    指定日の&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%A6%E3%83%AA%E3%82%A6%E3%82%B9%E9%80%9A%E6%97%A5&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;ユリウス日&lt;/a&gt;
                    &lt;div class=&#34;help&#34;&gt;
                        （例）2457192.5
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;month&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;integer&lt;/td&gt;
                &lt;td&gt;
                    指定日の月
                    &lt;div class=&#34;help&#34;&gt;
                        （例）6
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;month_en&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の月の英名（すべて小文字）
                    &lt;div class=&#34;help&#34;&gt;
                        （例）june
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;month_ja&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の月の陰暦名
                    &lt;div class=&#34;help&#34;&gt;
                        （例）文月
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;month_end&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;integer&lt;/td&gt;
                &lt;td&gt;
                    指定日の月の月末日
                    &lt;div class=&#34;help&#34;&gt;
                        （例）31
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;moon&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;integer&lt;/td&gt;
                &lt;td&gt;
                    指定日の&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E6%9C%88%E7%9B%B8&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;月相&lt;/a&gt;（月齢）数。0～27（28でないことに注意）の数値。
                    &lt;div class=&#34;help&#34;&gt;
                        （例）2
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;moon_en&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の月相の状態を英語で。&lt;br&gt;該当しない場合は &lt;code&gt;null&lt;/code&gt;
                    &lt;div class=&#34;help&#34;&gt;
                        （例）New Moon
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;moon_ja&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の月相の状態を日本語で。&lt;br&gt;該当しない場合は &lt;code&gt;null&lt;/code&gt;
                    &lt;div class=&#34;help&#34;&gt;
                        （例）新月
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;old_date&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日から算出した旧暦の日付&lt;small&gt;（YYYY-MM-DD形式）&lt;/small&gt;
                    &lt;div class=&#34;help&#34;&gt;
                        （例）2015-05-04
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;old_year&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;integer&lt;/td&gt;
                &lt;td&gt;
                    指定日から算出した旧暦の年
                    &lt;div class=&#34;help&#34;&gt;
                        （例）2015
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;old_month&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;integer&lt;/td&gt;
                &lt;td&gt;
                    指定日から算出した旧暦の月
                    &lt;div class=&#34;help&#34;&gt;
                        （例）5
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;old_date&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;integer&lt;/td&gt;
                &lt;td&gt;
                    指定日から算出した旧暦の日
                    &lt;div class=&#34;help&#34;&gt;
                        （例）4
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;old_leap&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;boolean&lt;/td&gt;
                &lt;td&gt;
                    指定日から算出した旧暦が閏月かどうか
                    &lt;div class=&#34;help&#34;&gt;
                        （例）false
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;rokuyo&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%85%AD%E6%9B%9C&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;六曜&lt;/a&gt;名
                    &lt;div class=&#34;help&#34;&gt;
                        （例）友引
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;season_en&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の季節を英語で（全て小文字）&lt;br&gt;
                    &lt;small&gt;※季節の分け方は&lt;a href=&#34;https://www.nhk.or.jp/bunken/summary/kotoba/gimon/194.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;気象庁が決めている区分&lt;/a&gt;です。&lt;/small&gt;
                    &lt;div class=&#34;help&#34;&gt;
                        （例）summer
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;season_ja&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の季節を日本語で（全て小文字）
                    &lt;div class=&#34;help&#34;&gt;
                        （例）夏
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;sunrise&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の日の出の時刻&lt;small&gt;（YYYY-MM-DD HH:MM:SS形式）&lt;/small&gt;
                    &lt;div class=&#34;help&#34;&gt;
                        （例）2015-06-19 04:25:21
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;sunrise&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の日の入りの時刻&lt;small&gt;（YYYY-MM-DD HH:MM:SS形式）&lt;/small&gt;
                    &lt;div class=&#34;help&#34;&gt;
                        （例）2015-06-19 18:59:44
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;timezone&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    日付計算のタイムゾーン（「JST」固定）
                    &lt;div class=&#34;help&#34;&gt;
                        （例）JST
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;week&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;integer&lt;/td&gt;
                &lt;td&gt;
                    指定日の曜日番号&lt;small&gt;（0＝日曜、1＝月曜...）&lt;/small&gt;
                    &lt;div class=&#34;help&#34;&gt;
                        （例）5
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;week_en&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の曜日を英語で（すべて小文字）
                    &lt;div class=&#34;help&#34;&gt;
                        （例）friday
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;week_ja&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;string&lt;/td&gt;
                &lt;td&gt;
                    指定日の曜日を日本語で
                    &lt;div class=&#34;help&#34;&gt;
                        （例）金
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;week_number&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;integer&lt;/td&gt;
                &lt;td&gt;
                    指定日がその月の第何曜日かの番号。&lt;br&gt;
                    例えば &lt;code&gt;week_number&lt;/code&gt; が「3」で &lt;code&gt;week_ja&lt;/code&gt; が「金」なら「第3金曜日」
                    &lt;div class=&#34;help&#34;&gt;
                        （例）3
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;week_number_of_year&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;integer&lt;/td&gt;
                &lt;td&gt;
                    指定日の週番号（その年の最初の日曜日から数えて第何週目か）
                    &lt;div class=&#34;help&#34;&gt;
                        （例）24
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;year&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;integer&lt;/td&gt;
                &lt;td&gt;
                    指定日の西暦での年
                    &lt;div class=&#34;help&#34;&gt;
                        （例）2015
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;year_ja&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;integer&lt;/td&gt;
                &lt;td&gt;
                    指定日の和暦での年
                    &lt;div class=&#34;help&#34;&gt;
                        （例）27
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;th nowrap=&#34;nowrap&#34;&gt;_now&lt;/th&gt;
                &lt;td nowrap=&#34;nowrap&#34;&gt;json&lt;/td&gt;
                &lt;td&gt;
                    リクエスト時点の日時の情報
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;

&lt;h2 id=&#34;レスポンス例:855a73b9cbbdda0a2bfb5acab02a8dc0&#34;&gt;レスポンス例&lt;/h2&gt;

&lt;p&gt;※見やすいように整形しています。実際は改行なしです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;century&amp;quot;: 21,
    &amp;quot;date&amp;quot;: &amp;quot;2015-06-19&amp;quot;,
    &amp;quot;date_ja&amp;quot;: &amp;quot;2015年6月19日(金)&amp;quot;,
    &amp;quot;day&amp;quot;: 19,
    &amp;quot;eto&amp;quot;: &amp;quot;未&amp;quot;,
    &amp;quot;eto_kana&amp;quot;: &amp;quot;ひつじ&amp;quot;,
    &amp;quot;gengo&amp;quot;: &amp;quot;平成&amp;quot;,
    &amp;quot;gengo_full&amp;quot;: &amp;quot;平成27年&amp;quot;,
    &amp;quot;holiday&amp;quot;: null,
    &amp;quot;julian&amp;quot;: 2457192.5,
    &amp;quot;month&amp;quot;: 6,
    &amp;quot;month_en&amp;quot;: &amp;quot;june&amp;quot;,
    &amp;quot;month_end&amp;quot;: 31,
    &amp;quot;month_ja&amp;quot;: &amp;quot;文月&amp;quot;,
    &amp;quot;moon&amp;quot;: 2,
    &amp;quot;moon_en&amp;quot;: null,
    &amp;quot;moon_ja&amp;quot;: null,
    &amp;quot;old_date&amp;quot;: &amp;quot;2015-05-04&amp;quot;,
    &amp;quot;old_day&amp;quot;: 4,
    &amp;quot;old_leap&amp;quot;: false,
    &amp;quot;old_month&amp;quot;: 5,
    &amp;quot;old_year&amp;quot;: 2015,
    &amp;quot;rokuyo&amp;quot;: &amp;quot;友引&amp;quot;,
    &amp;quot;season_en&amp;quot;: &amp;quot;summer&amp;quot;,
    &amp;quot;season_ja&amp;quot;: &amp;quot;夏&amp;quot;,
    &amp;quot;sunrise&amp;quot;: &amp;quot;2015-06-19 04:25:21&amp;quot;,
    &amp;quot;sunset&amp;quot;: &amp;quot;2015-06-19 18:59:44&amp;quot;,
    &amp;quot;timezone&amp;quot;: &amp;quot;JST&amp;quot;,
    &amp;quot;week&amp;quot;: 5,
    &amp;quot;week_en&amp;quot;: &amp;quot;friday&amp;quot;,
    &amp;quot;week_ja&amp;quot;: &amp;quot;金&amp;quot;,
    &amp;quot;week_number&amp;quot;: 3.0,
    &amp;quot;week_number_of_year&amp;quot;: 24,
    &amp;quot;year&amp;quot;: 2015,
    &amp;quot;year_ja&amp;quot;: 27,
    &amp;quot;_now&amp;quot;: {
        &amp;quot;date&amp;quot;: &amp;quot;2015-06-19&amp;quot;,
        &amp;quot;datetime&amp;quot;: &amp;quot;2015-06-19 06:20:13&amp;quot;,
        &amp;quot;day&amp;quot;: 19,
        &amp;quot;hour&amp;quot;: 6,
        &amp;quot;minute&amp;quot;: 20,
        &amp;quot;month&amp;quot;: 6,
        &amp;quot;second&amp;quot;: 13,
        &amp;quot;week&amp;quot;: 5,
        &amp;quot;week_en&amp;quot;: &amp;quot;friday&amp;quot;,
        &amp;quot;week_ja&amp;quot;: &amp;quot;金&amp;quot;,
        &amp;quot;year&amp;quot;: 2015
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;あとがき:855a73b9cbbdda0a2bfb5acab02a8dc0&#34;&gt;あとがき&lt;/h2&gt;

&lt;p&gt;基本的に放置したいのと、SSLが使いたかったので&lt;a href=&#34;https://cloud.google.com/appengine/?hl=ja&#34;&gt;Google App Engine&lt;/a&gt;を使った。&lt;br /&gt;
しかも完全無料でやるために、普段はPHPなんだけど慣れないPythonで組んだので少し時間がかかったw。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;旧暦の計算は&lt;a href=&#34;http://d.hatena.ne.jp/fgshun/20091127/1259302979&#34;&gt;銀月の符号&lt;/a&gt;さんのプログラムを使った。&lt;br /&gt;
（六曜は旧暦から取得した日付から &lt;code&gt;(月 + 日) % 6&lt;/code&gt; で算出）&lt;/li&gt;
&lt;li&gt;祝日の取得には&lt;a href=&#34;http://www.h3.dion.ne.jp/~sakatsu/holiday_logic5.htm#Python&#34;&gt;Python 用祝日判定コード&lt;/a&gt;を使わせてもらった。&lt;br /&gt;
一部動かない部分があったので &lt;code&gt;import datetime&lt;/code&gt; の部分を&lt;br /&gt;
&lt;code&gt;import datetime, math, sys&lt;/code&gt; に変更した。&lt;/li&gt;
&lt;li&gt;月相（月齢）の計算には &lt;a href=&#34;https://pypi.python.org/pypi/astral/0.8.1&#34;&gt;Astral&lt;/a&gt; を使った。 &lt;a href=&#34;http://rhodesmill.org/pyephem/&#34;&gt;PyEphem&lt;/a&gt; というのが精度がいいみたいだけどGAEでは動かなさそうだった。&lt;/li&gt;
&lt;li&gt;最も苦戦したのが「指定日がその月の第何曜日か」の部分。「第○曜日が何日か」の算出はたくさん見つかるんだけど、その逆がなかなか思いつかなくてw&lt;br /&gt;
結局 &lt;code&gt;ceil((日 + 7 - 曜日) / 7)&lt;/code&gt; という簡単なことだった。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Windows 10 で自分の開発環境が動くのか試す</title>
      <link>https://kijtra.com/article/windows10-app-operation-check</link>
      <pubDate>Fri, 05 Jun 2015 17:34:27 +0900</pubDate>
      
      <guid>https://kijtra.com/article/windows10-app-operation-check</guid>
      <description>

&lt;p&gt;Windows 10 にアップデートしたとして、自分の最低限の開発環境が維持できるのか一応試してみた。&lt;/p&gt;

&lt;p&gt;試したWindows 10 は以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://windows.microsoft.com/ja-jp/windows/preview-iso-update-1504&#34;&gt;Windows 10 Insider Preview (x86) - ビルド 10074&lt;/a&gt;（のISOファイル）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.virtualbox.org&#34;&gt;VirtualBox&lt;/a&gt; 4.3.28&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;VirtualBoxで動かす手順は以下のページを参考にさせてもらいました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://whois.hatenablog.com/entry/2015/03/27/113645&#34;&gt;Windows10 テクニカルプレビューをVirtualBoxにインストールする方法&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;※個人的な最低限のアプリのみ。&lt;br /&gt;
※OKかどうかは単に「起動した」という時点までの確認。&lt;br /&gt;
※&lt;strong&gt;結局のところ動かないものはなさそうだった。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;追記-2015-08-10:c706afa90b3266be1eddbca06c046702&#34;&gt;追記（2015/08/10）&lt;/h3&gt;

&lt;p&gt;実際にWindows10にアップグレードして数日が経ったけど、以下全てのアプリケーションは特に問題なく動いている。&lt;/p&gt;

&lt;h2 id=&#34;sublime-text-2-http-www-sublimetext-com-2-ver-2-0-2-ok:c706afa90b3266be1eddbca06c046702&#34;&gt;&lt;strong&gt;&lt;a href=&#34;http://www.sublimetext.com/2&#34;&gt;Sublime Text 2&lt;/a&gt; ver 2.0.2&lt;/strong&gt; ・・・ &lt;strong&gt;OK&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://packagecontrol.io/&#34;&gt;Package Control&lt;/a&gt;入れて&lt;a href=&#34;https://packagecontrol.io/packages/SFTP&#34;&gt;SFTPプラグイン&lt;/a&gt;入れるまで確認。&lt;br /&gt;
何度かPackage Controlの警告っぽいのが出たけど動く。&lt;br /&gt;
&lt;a href=&#34;https://lh3.googleusercontent.com/rlDwFPV0cyDgkFKY6eedYMNTJU9be7cU_SkStAia8Ko=w689-h575-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/rlDwFPV0cyDgkFKY6eedYMNTJU9be7cU_SkStAia8Ko=w689-h575-no&#34; alt=&#34;Windows10でのSublime Text 2&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;sublime-text-3-http-www-sublimetext-com-3-build-3083-ok:c706afa90b3266be1eddbca06c046702&#34;&gt;&lt;strong&gt;&lt;a href=&#34;http://www.sublimetext.com/3&#34;&gt;Sublime Text 3&lt;/a&gt; build 3083&lt;/strong&gt; ・・・ &lt;strong&gt;OK&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://packagecontrol.io/&#34;&gt;Package Control&lt;/a&gt;入れて&lt;a href=&#34;https://packagecontrol.io/packages/SFTP&#34;&gt;SFTPプラグイン&lt;/a&gt;入れるまで確認。&lt;br /&gt;
&lt;a href=&#34;https://lh3.googleusercontent.com/IAU-ymYV-Pzy0AaloYlioT50g2p2iBX2oZ2IZqeQEH4=w692-h578-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/IAU-ymYV-Pzy0AaloYlioT50g2p2iBX2oZ2IZqeQEH4=w692-h578-no&#34; alt=&#34;Windows10でのSublime Text 3&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;atom-http-atom-io-ver-0-205-ok:c706afa90b3266be1eddbca06c046702&#34;&gt;&lt;strong&gt;&lt;a href=&#34;http://atom.io&#34;&gt;Atom&lt;/a&gt; ver 0.205&lt;/strong&gt; ・・・ &lt;strong&gt;OK&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;起動まで確認。&lt;br /&gt;
&lt;a href=&#34;https://lh3.googleusercontent.com/PE1Kx20NQytqB-BogsGwgbmzaaPo1wO_S-lJiHQYTzk=w891-h679-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/PE1Kx20NQytqB-BogsGwgbmzaaPo1wO_S-lJiHQYTzk=w891-h679-no&#34; alt=&#34;Windows10でのAtom&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;git-for-windows-http-atom-io-ver-1-9-5-ok:c706afa90b3266be1eddbca06c046702&#34;&gt;&lt;strong&gt;&lt;a href=&#34;http://atom.io&#34;&gt;Git for Windows&lt;/a&gt; ver 1.9.5&lt;/strong&gt; ・・・ &lt;strong&gt;OK&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;起動まで確認。&lt;br /&gt;
&lt;a href=&#34;https://lh3.googleusercontent.com/tB_fEPPJfWyUvjlSFUln7re5iiOK3qHQFyPxZRD-rnE=w683-h492-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/tB_fEPPJfWyUvjlSFUln7re5iiOK3qHQFyPxZRD-rnE=w683-h492-no&#34; alt=&#34;Windows10でのGit for Windows&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;xampp-http-www-chiark-greenend-org-uk-sgtatham-putty-index-html-ver-3-2-1-ok:c706afa90b3266be1eddbca06c046702&#34;&gt;&lt;strong&gt;&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/index.html&#34;&gt;XAMPP&lt;/a&gt; ver 3.2.1&lt;/strong&gt; ・・・ &lt;strong&gt;OK&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Apache、MySQL起動まで確認。&lt;br /&gt;
&lt;a href=&#34;https://lh3.googleusercontent.com/fmLzKFaDmkGn0ArPD9GrmvvOiHv3r90Fh0v7mt5GK-M=w768-h506-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/fmLzKFaDmkGn0ArPD9GrmvvOiHv3r90Fh0v7mt5GK-M=w768-h506-no&#34; alt=&#34;Windows10でのXAMPP&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;秀丸エディタ-http-hide-maruo-co-jp-software-hidemaru-html-ver-8-52-ok:c706afa90b3266be1eddbca06c046702&#34;&gt;&lt;strong&gt;&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34;&gt;秀丸エディタ&lt;/a&gt; ver 8.52&lt;/strong&gt; ・・・ &lt;strong&gt;OK&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;まだバリバリ愛用中w　起動まで確認。&lt;br /&gt;
&lt;a href=&#34;https://lh3.googleusercontent.com/-kS4svYzhHsn-lqlZtXEaJKqtrVWreptSLmkdXSxKdM=w841-h559-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-kS4svYzhHsn-lqlZtXEaJKqtrVWreptSLmkdXSxKdM=w841-h559-no&#34; alt=&#34;Windows10での秀丸エディタ&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;putty-http-www-chiark-greenend-org-uk-sgtatham-putty-index-html-ver-0-64-ok:c706afa90b3266be1eddbca06c046702&#34;&gt;&lt;strong&gt;&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/index.html&#34;&gt;PuTTY&lt;/a&gt; ver 0.64&lt;/strong&gt; ・・・ &lt;strong&gt;OK&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;起動して特定ホストに接続するまで確認。&lt;br /&gt;
&lt;a href=&#34;https://lh3.googleusercontent.com/PKuwq_6BhwaK5YfULoKfaisLVZ0ryb271Yoo2jGlUOE=w493-h415-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/PKuwq_6BhwaK5YfULoKfaisLVZ0ryb271Yoo2jGlUOE=w493-h415-no&#34; alt=&#34;Windows10でのPuTTY&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;winscp-http-winscp-net-eng-docs-lang-jp-ver-5-7-3-ok:c706afa90b3266be1eddbca06c046702&#34;&gt;&lt;strong&gt;&lt;a href=&#34;http://winscp.net/eng/docs/lang:jp&#34;&gt;WinSCP&lt;/a&gt; ver 5.7.3&lt;/strong&gt; ・・・ &lt;strong&gt;OK&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;起動して特定サーバーに接続するまで確認。&lt;br /&gt;
&lt;a href=&#34;https://lh3.googleusercontent.com/wOJsRmjExknKKw5jJJI1lW9ErAcq8SALuc2rZmWcz_E=w663-h458-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/wOJsRmjExknKKw5jJJI1lW9ErAcq8SALuc2rZmWcz_E=w663-h458-no&#34; alt=&#34;Windows10でのWinSCP&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;heidisql-http-www-heidisql-com-ver-9-2-ok:c706afa90b3266be1eddbca06c046702&#34;&gt;&lt;strong&gt;&lt;a href=&#34;http://www.heidisql.com/&#34;&gt;HeidiSQL&lt;/a&gt; ver 9.2&lt;/strong&gt; ・・・ &lt;strong&gt;OK&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;起動して特定サーバーに接続するまで確認。あんまり使ってる人いないかもだけど。&lt;br /&gt;
&lt;a href=&#34;https://lh3.googleusercontent.com/NaJ_AeuE6MV7R1phMQapW56EsbLwfHFLoB6O8TgH4_s=w722-h452-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/NaJ_AeuE6MV7R1phMQapW56EsbLwfHFLoB6O8TgH4_s=w722-h452-no&#34; alt=&#34;Windows10でのHeidiSQL&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;その他-oneget-https-oneget-org-にて:c706afa90b3266be1eddbca06c046702&#34;&gt;&lt;strong&gt;その他（&lt;a href=&#34;https://oneget.org&#34;&gt;OneGet&lt;/a&gt; にて）&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Windows 10 からはパッケージマネージャとして「OneGet」が標準装備。&lt;br /&gt;
デフォルトではプロバイダに&lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;がないので、&lt;a href=&#34;https://github.com/OneGet/oneget/wiki/cmdlets&#34;&gt;ここの説明&lt;/a&gt;にしたがって組み込んで、プログラミング系のものを入れてみた。&lt;br /&gt;
&lt;a href=&#34;https://lh3.googleusercontent.com/g04zjpoKj7A7Md-LQUgvp5oUGmMoS0PKKHwdtIAWqpA=w716-h443-no&#34;&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/g04zjpoKj7A7Md-LQUgvp5oUGmMoS0PKKHwdtIAWqpA=w716-h443-no&#34; alt=&#34;Windows10でのOneGetの結果&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Windows 10 自体は（VirtualBox上だけど）わりとサクサク動く感じだった。&lt;br /&gt;
IEに取って代わったSpartanは本当にWebのブラウズのみ特化した感じ。&lt;br /&gt;
Windowsストア（β）はまだまだ業務系アプリが少なくて今のところ用なしだった。&lt;br /&gt;
あとは、シャットダウン系のボタンがなぜか「仕事率」という名前だったり、&lt;br /&gt;
Windowsボタン（画面左下のやつ）が効かなくなったり、&lt;br /&gt;
Spartanがいつのまにか終了してたり、&lt;br /&gt;
ダウンロードファイルの検証に10分ほどかかったり（で結局ダウンロードできなかったり）、&lt;br /&gt;
各種アプリがなかなか起動しなかったり（PowerShellの起動に5分ほどかかった）&lt;br /&gt;
・・・といったところがあったので、まだ不安なところもあるかな・・・&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ブログのバックエンドを「Hugo」(＋Github Pages)に変更</title>
      <link>https://kijtra.com/article/change-to-hugo</link>
      <pubDate>Tue, 02 Jun 2015 18:39:32 +0900</pubDate>
      
      <guid>https://kijtra.com/article/change-to-hugo</guid>
      <description>

&lt;p&gt;ブログのバックエンドをGo言語製のHugo(＋Github Pages)に全面変更したので記録ついでにメモ。&lt;/p&gt;

&lt;p&gt;これまで、ブログのバックエンドは以下のような構成だった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;開発環境 → &lt;a href=&#34;https://c9.io/&#34;&gt;Cloud9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;エディタ  →  同上&lt;/li&gt;
&lt;li&gt;CMS → &lt;a href=&#34;https://middlemanapp.com/jp/&#34;&gt;Middleman&lt;/a&gt;(Ruby)&lt;/li&gt;
&lt;li&gt;ホスティング → &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cloud9 に Middleman をインストールし、その Cloud9 上で Markdown ファイルを編集し、Cloud9 上でプレビューして確認、そのまま GitHub Pages にデプロイ（公開）。&lt;br /&gt;
この構成でネットとブラウザさえあればどこでも編集・公開できるんだけど、去年あたりから Cloud9 が無料版と有料版の差をつけはじめ、無料版ではサーバーの起動が非常に遅くなってややストレスに。&lt;br /&gt;
とうことで最近になって環境を変えることにした。&lt;/p&gt;

&lt;p&gt;自分の行動からして出先でブログ更新とかまずやらない（推敲のみ）ので、素直にローカルPCで記事作成してから GitHub Pages にデプロイするようにした。&lt;br /&gt;
でも新規投稿時の記事リンク貼りとかいちいち作業するわけにもいかないので静的サイトジェネレータを探してみたところ、ローカルで動かすなら &lt;strong&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/strong&gt; が最適な感じだった。&lt;br /&gt;
現状の環境は以下な感じ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;開発環境 → ローカル（Windows）&lt;/li&gt;
&lt;li&gt;エディタ  →  Atom（デフォルトの &lt;a href=&#34;https://github.com/atom/markdown-preview&#34;&gt;Markdown Preview&lt;/a&gt; 機能）&lt;/li&gt;
&lt;li&gt;CMS → &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ホスティング → &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hugo は Go言語 で制作されていて、Windows用に .exe ファイルが1つだけのアプリとして&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;提供されている&lt;/a&gt;。&lt;br /&gt;
なので、基本はコマンドプロンプトで hugo.exe （ダウンロード時はファイル名が違うのでリネームする）を呼び出しての作業になる。&lt;/p&gt;

&lt;p&gt;1ファイルなのでブログのリポジトリにそのまま入れて作業している。&lt;br /&gt;
で、ブログのリポジトリ自体は Dropbox にまるごと入れてるので Dropbox と Git があればどこでも作業ができなくもない（やらんけどw）。&lt;/p&gt;

&lt;h2 id=&#34;hugo-のインストール:1d76fd942bc4cf526400338024bd2133&#34;&gt;Hugo のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo の GitHub から最新版アプリをダウンロード&lt;/a&gt;。&lt;br /&gt;
ウチの環境は Windows7 64-bit なので &lt;strong&gt;hugo_0.xx_windows_amd64.zip&lt;/strong&gt; をダウンロードして解凍。&lt;br /&gt;
中に &lt;strong&gt;hugo_0.xx_windows_amd64.exe&lt;/strong&gt; があるので、「 &lt;strong&gt;hugo.exe&lt;/strong&gt; 」にリネームしてパスの通ったところに置くか、ウチのようにローカルのブログ用リポジトリのルートフォルダに入れる（そこでしか作業しない場合）。&lt;/p&gt;

&lt;h2 id=&#34;サイトの作成:1d76fd942bc4cf526400338024bd2133&#34;&gt;サイトの作成&lt;/h2&gt;

&lt;p&gt;コマンドプロンプトを開き、ローカルのブログ用フォルダ（空フォルダ。あるのは hugo.exe のみ）に移動。&lt;br /&gt;
以下のコマンドで初期構成が生成される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new site ./
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ファイル構成は自動で以下のように作られる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;▸ archetypes/  # ページ(mdファイル)のデフォルトテンプレート
▸ content/ # ここの中身が最終的に静的サイトとして生成される
▸ layouts/ # レイアウト、テーマ関連
▸ static/ # 画像やCSS、JSとかを管理する
  config.toml # サイト設定ファイル
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基本設定などは、基本的に生成された「config.toml」ファイルに書く。&lt;br /&gt;
個人的に toml という形式が慣れなかったので &lt;strong&gt;config.yaml&lt;/strong&gt; ファイルにすることにした。&lt;br /&gt;
設定ファイルは config.toml →なければ config.yaml →なければ config.json という順番で自動判別してくれる。&lt;/p&gt;

&lt;h2 id=&#34;テーマ-ページテンプレート-の作成:1d76fd942bc4cf526400338024bd2133&#34;&gt;テーマ（ページテンプレート）の作成&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;themes&lt;/code&gt; フォルダがなければ作っておく。&lt;br /&gt;
特にこだわりがなければ&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;公式テーマの集まってる処&lt;/a&gt;があるので、そこから落としてきて &lt;code&gt;themes&lt;/code&gt; に入れる。&lt;/p&gt;

&lt;p&gt;今回は自前のデザインを引き継ぐので自作することになったので、他のテーマを参考にしつつ、同じく &lt;code&gt;themes&lt;/code&gt; に作って入れた。&lt;br /&gt;
自前テーマの作り方は&lt;a href=&#34;http://gohugo.io/themes/creation/&#34;&gt;公式ドキュメント（英語）&lt;/a&gt;を参照。&lt;br /&gt;
基本的に&lt;a href=&#34;http://golang.org/pkg/html/template/&#34;&gt;Go言語のHTMLテンプレート機能&lt;/a&gt;に沿って記述する。  （&lt;a href=&#34;https://mustache.github.io/&#34;&gt;mustache&lt;/a&gt;に似てる）&lt;/p&gt;

&lt;h2 id=&#34;記事-ページ-の作成:1d76fd942bc4cf526400338024bd2133&#34;&gt;記事（ページ）の作成&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;content&lt;/code&gt; フォルダに Markdown ファイル（拡張子は .md または .markdown）を入れると、それが最終的にテーマ（テンプレート）を通してHTMLファイルとして生成される。&lt;br /&gt;
ウチの場合、記事ページは &lt;code&gt;/article/xxxxxxx&lt;/code&gt; というURL構成なので、 &lt;code&gt;content/article/xxxxxxxx.md&lt;/code&gt; というファイルを作っていく。&lt;/p&gt;

&lt;h3 id=&#34;markdownフォーマットの設定:1d76fd942bc4cf526400338024bd2133&#34;&gt;Markdownフォーマットの設定&lt;/h3&gt;

&lt;p&gt;Markdown は &lt;a href=&#34;http://gohugo.io/content/front-matter/&#34;&gt;Front Matter&lt;/a&gt; という形式で書くんだけど、デフォルトでは toml（TOML Front Matter） の形式になっている。&lt;br /&gt;
これも個人的に慣れてない（＆旧記事ページが対応してない）ので &lt;strong&gt;YAML Front Matter&lt;/strong&gt; 形式で書けるようにする。&lt;br /&gt;
&lt;code&gt;config.yaml&lt;/code&gt; に以下の一行を追加。（なければ）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;metaDataFormat:  &amp;quot;yaml&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;architypes-の作成:1d76fd942bc4cf526400338024bd2133&#34;&gt;architypes の作成&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;architypes&lt;/code&gt; フォルダが空の場合、とりあえず「**&lt;code&gt;default.md&lt;/code&gt;**」というファイルがないとページ作成時にエラーが出る。&lt;br /&gt;
&lt;code&gt;default.md&lt;/code&gt; の中身はページ生成時のデフォルトテンプレートとして使われる。&lt;br /&gt;
例としては以下のようなもの。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-md:architypes/default.md&#34;&gt;---
tags:
categories:
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;新規投稿ページの作成:1d76fd942bc4cf526400338024bd2133&#34;&gt;新規投稿ページの作成&lt;/h3&gt;

&lt;p&gt;以下のコマンドで新規ページが作成される。  （ブログのルートフォルダで実行）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new article/new-post-dayo.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記コマンドは &lt;code&gt;content/article/new-post-dayo.md&lt;/code&gt; を生成するコマンド。&lt;br /&gt;
実行すると以下のようなファイルが作られる。（&lt;code&gt;architypes/default.md&lt;/code&gt; の内容が反映される）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;---
date: 2015-06-01T10:51:30+09:00
title: new post dayo
tags:
categories:
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;サイトのプレビュー:1d76fd942bc4cf526400338024bd2133&#34;&gt;サイトのプレビュー&lt;/h2&gt;

&lt;p&gt;記事ファイルができたらプレビューしてみる。コマンドは以下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo server --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行すると以下のような表示が出る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;0 draft content
0 future content
1 pages created
0 paginator pages created
0 categories created
in 258 ms
Watching for changes in C:\xxxxxxx\xxxxxx\{content,layouts,static,themes\kijtra}
Serving pages from C:\xxxxxxx\xxxxxx\public
Web Server is available at http://127.0.0.1:1313/
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;http://127.0.0.1:1313/&lt;/code&gt; をブラウザで開いてプレビューできる。&lt;br /&gt;
&lt;code&gt;--watch&lt;/code&gt; はリアルタイムプレビューのオプションで、ファイル変更を監視してくれる。&lt;/p&gt;

&lt;p&gt;プレビューすると自動的に &lt;code&gt;public&lt;/code&gt; というフォルダが生成されている。&lt;br /&gt;
このフォルダが公開対象フォルダ(GitHub Pagesに置くフォルダ)になる。&lt;/p&gt;

&lt;h2 id=&#34;github-pagesでの公開:1d76fd942bc4cf526400338024bd2133&#34;&gt;GitHub Pagesでの公開&lt;/h2&gt;

&lt;p&gt;単純に生成されたファイルを GitHub Pages 用リポジトリにプッシュすれば公開される。&lt;br /&gt;
でも個人的にサイトのルートフォルダごと GitHub で管理したかったので&lt;a href=&#34;http://gohugo.io/tutorials/github-pages-blog/&#34;&gt;公式ドキュメントのGitHub Pagesで公開する方法（英語）&lt;/a&gt;を参考にした。&lt;/p&gt;

&lt;p&gt;この方法でやる場合、GitHubに&lt;strong&gt;2つのリポジトリが必要になる&lt;/strong&gt;。&lt;br /&gt;
ひとつはサイトの全ファイル用、もうひとつは公開用（&lt;em&gt;username&lt;/em&gt;.github.io）。&lt;/p&gt;

&lt;p&gt;おおまかな手順としては、全ファイル用リポジトリにファイルを置き、&lt;code&gt;public&lt;/code&gt; フォルダのみ &lt;a href=&#34;https://git-scm.com/book/ja/v1/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB&#34;&gt;git submodule&lt;/a&gt; 機能で別リポジトリにする。&lt;/p&gt;

&lt;p&gt;例としては、最初に以下のコマンドでリポジトリを設定した。&lt;br /&gt;
（すべてルートディレクトリ作業）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Gitの初期化
git init
git remote add origin https://github.com/&amp;lt;全ファイル用リポジトリ&amp;gt;.git

# サイトをビルド
hugo

# いったんpublicフォルダを削除（いつでも生成できるので心配無用）
rm -rf public

# gitにファイル追加
git add -A

# いったんコミット（プッシュはまだしない）
git commit -m &amp;quot;before add submodule&amp;quot;

# publicフォルダのみ公開用リポジトリとして管理
git submodule add git@github.com:&amp;lt;公開用リポジトリ&amp;gt;.git public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで公開の準備ができた。&lt;/p&gt;

&lt;p&gt;実際に公開する時には毎回いくつかのコマンドが必要「になって面倒なので、以下のような&lt;strong&gt;deploy.sh&lt;/strong&gt;というファイルを用意しておく。&lt;br /&gt;
※ Windowsでshファイルを実行するので、Git Bash(&lt;a href=&#34;https://msysgit.github.io/&#34;&gt;Git for Windows&lt;/a&gt;)が入っている必要がある&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh:deploy.sh&#34;&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# サイトをビルド
hugo

# 変更ファイルをgitに追加
git add -A

# コミット（引数があればそれをコミットメッセージにする）
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# 親フォルダ（全ファイル）をプッシュ
git push origin master

# 公開用フォルダ（サブモジュール）をプッシュ
git subtree push --prefix=public https://github.com/&amp;lt;公開用リポジトリ&amp;gt;.git master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、今後公開する時は以下のコマンドだけで公開可能。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;deploy.sh &amp;quot;コミットメッセージ&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>いま入れてるAtomプラグイン（パッケージ）メモ（2015年5月）</title>
      <link>https://kijtra.com/article/my-atom-packages</link>
      <pubDate>Mon, 25 May 2015 23:00:00 +0900</pubDate>
      
      <guid>https://kijtra.com/article/my-atom-packages</guid>
      <description>&lt;p&gt;最近はSublime Textと併用してAtomもわりと使っていて、プラグイン（パッケージ）探しが落ち着いてきたのでメモしておく。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;半年経過して、入れているプラグインも変わってきたので &lt;a href=&#34;https://kijtra.com/article/my-atom-packages2/&#34;&gt;2015年12月時点のプラグインまとめ&lt;/a&gt;  として新たにメモした。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;基本的にWeb系＋PHPの開発が多いのと、環境がWindowsなので、そのような傾向にある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/emmet&#34;&gt;emmet&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
HTML等を簡単な記述でコーディングできるプラグイン。&lt;br /&gt;
他のエディタもすべて必ず入れてる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/minimap&#34;&gt;minimap&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
エディタの横にファイルの全体像を表示する。スクロールバー代わりに便利。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/japanese-wrap&#34;&gt;japanese-wrap&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
日本語の文章がウインドウの端で改行されるようにする。Atomのv0.201.0時点でも公式対応されていないので必要。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/atom-color-highlight&#34;&gt;atom-color-highlight&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
コード中のCSSカラーっぽい文字を検出して背景にその色を表示してくれる。&lt;br /&gt;
Sublime Textの&lt;a href=&#34;https://packagecontrol.io/packages/Color%20Highlighter&#34;&gt;Color Highlighter&lt;/a&gt;が便利だったので同等のものを。&lt;br /&gt;
&lt;img src=&#34;https://i.github-camo.com/c3aaeeee1875bec435e468f58357becbac26367a/68747470733a2f2f7261772e6769746875622e636f6d2f61626533332f61746f6d2d636f6c6f722d686967686c696768742f6d61737465722f61746f6d2d636f6c6f722d686967686c696768742d7661726961626c65732e676966&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/project-manager&#34;&gt;project-manager&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
プロジェクトを管理するプラグイン。デフォルト機能にしてほしい。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/open-last-project&#34;&gt;open-last-project&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
Atom起動時、最後に開いていたプロジェクトを開くプラグイン。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/atom-terminal&#34;&gt;atom-terminal&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
いま開いているプロジェクトのディレクトリでターミナル系アプリを起動するプラグイン。&lt;br /&gt;
ちなみに個人的に&lt;a href=&#34;https://conemu.github.io/&#34;&gt;ConEmu&lt;/a&gt;でGit Bashをメインに使っている。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/linter&#34;&gt;linter&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
コードのリアルタイムエラー検出。これ単体では意味がなく、以下のように言語ごとに用意する。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/linter-jshint&#34;&gt;linter-jshint&lt;/a&gt; JavaScript用。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/linter-less&#34;&gt;linter-less&lt;/a&gt; LESS用。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/linter-php&#34;&gt;linter-php&lt;/a&gt; PHP用。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/chary-tree-view&#34;&gt;chary-tree-view&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
左サイドのファイルツリーで、シングルクリックのプレビューを表示しないプラグイン。&lt;br /&gt;
Atomではファイルツリーのシングルクリックでプレビューとして開く仕様になっているけど、個人的にこれがけっこうストレスで、Minifyされたファイルや巨大ファイル（2MBの制限はあるけど）をクリックしてしまうとAtomがフリーズすることがちょこちょこあった。（流行りなのか、他のエディタでもそういう傾向があるみたい）&lt;br /&gt;
オフにしたくて&lt;a href=&#34;http://ja.stackoverflow.com/q/10485/3876&#34;&gt;StackOverflowで質問してみた&lt;/a&gt;ところ、心優しい人が速攻で作ってくれたもの。有り難し。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
ターミナル系アプリを使わなくてもGitコマンドを使えるプラグイン。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/git-control&#34;&gt;git-control&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
GitをGUIで操作するプラグイン。簡易&lt;a href=&#34;https://www.sourcetreeapp.com/&#34;&gt;SourceTree&lt;/a&gt;のようなもの。&lt;br /&gt;
基本的にGitの状態をざっと確認するのに使ってる。&lt;br /&gt;
&lt;img src=&#34;https://i.github-camo.com/e35620a073ae64498e9dbff837aa273d3dcb263d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6a61636f67722f61746f6d2d6769742d636f6e74726f6c2f6d61737465722f73637265656e73686f74732f6769742d30312e706e67&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/less-autocompile&#34;&gt;less-autocompile&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
LESSファイルの保存時にCSSにコンパイルする。（npmでlessをインストールしておく必要あり）&lt;br /&gt;
個人的にSASSやSCSSよりLESSを使うことが多いので。&lt;br /&gt;
このプラグインはファイル監視系ではなく、.lessファイルの1行目に出力先ファイル名や圧縮有無、ソースマップ有無などをコメントとして書くだけなので手軽で自由が効く。&lt;br /&gt;
SASSな人は「&lt;a href=&#34;https://atom.io/packages/sass-autocompile&#34;&gt;sass-autocompile&lt;/a&gt;」が同じ機能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/tool-bar&#34;&gt;tool-bar&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
エディタの上下左右好きなところにボタンを設置する。基本的にメインメニューやコマンドパレットのショートカット。&lt;br /&gt;
次項目のflex-tool-barと組み合わせて好きなボタンが入れられる。&lt;br /&gt;
&lt;img src=&#34;https://i.github-camo.com/8387595328108e1dce2b658a6827140047e286e9/687474703a2f2f636c2e6c792f696d6167652f3277307533633178314b33572f53637265656e73686f742d323031352d30342d32312d31362e34362e34392e706e67&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/flex-tool-bar&#34;&gt;flex-tool-bar&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
上記tool-barに依存したプラグイン。好きなアイコン＆コマンドでボタンを設置できる。&lt;br /&gt;
普通のURLでリンクも貼れるし、そのURL機能を使ってアプリのショートカットにもできる。&lt;br /&gt;
設定はAtomの設定フォルダ（~/.atom）の直下に &lt;code&gt;toolbar.json&lt;/code&gt; というファイルを作って、そこに書く。&lt;br /&gt;
例として&lt;a href=&#34;https://gist.github.com/kijtra/6b74e2decc14cbbde01a&#34;&gt;個人的な設定をGistに書いておいた&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/script&#34;&gt;script&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
コードの一部を選択してこのプラグインを使うと、その部分のコードを実行してくれる。いろんな言語に対応してて便利。&lt;br /&gt;
PHPでUNIX時間をDateTimeにしたりとかよく使う。&lt;br /&gt;
&lt;img src=&#34;https://i.github-camo.com/405fb492595dd819647af375b68c716fd862ee80/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f313639343035352f333232363230312f63343538616362632d663036372d313165332d383461302d6461323766653333346635652e676966&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/php-documentation-online&#34;&gt;php-documentation-online&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
PHP者用。コード中の関数にカーソルを合わせて &lt;kbd&gt;F4&lt;/kbd&gt; キーで公式ドキュメントが表示される。&lt;br /&gt;
デフォルトでは英語版なので、ソースを書き換えて日本語版に飛ぶようにしてる。&lt;br /&gt;
設定場所はプラグインのフォルダ内 &lt;code&gt;lib/php-documentation-online.coffee&lt;/code&gt; の28行目、
&lt;code&gt;http://php.net/manual/en/&lt;/code&gt; → &lt;code&gt;http://php.net/manual/ja/&lt;/code&gt; に。&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://atom.io/packages/SFTP-deployment&#34;&gt;SFTP-deployment&lt;/a&gt;&lt;/del&gt;&lt;br /&gt;
&lt;del&gt;(S)FTPでサーバーにアップ＆ダウンロードできる。Windowsだとダウンロードが不安定だったりdeprecationのコード使ってたりで今のところあまり実用的じゃない。&lt;br /&gt;
けどアップデート待ちで一応入れてる。&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/remote-ftp&#34;&gt;Remote-FTP&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
上の SFTP-Deploymentはやはり不安定すぎるのでこちらに変更した。&lt;br /&gt;
リモートファイル用のサイドバーが出るので確認がしやすく、Atom 1.0 にも対応している。
&lt;img src=&#34;https://i.github-camo.com/719a05ed4e28c2224f52b30ab08bd2d8e6af8a58/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6772656e6965722f72656d6f74652d6674702f6d61737465722f73637265656e73686f742e706e67&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/language-nginx&#34;&gt;language-nginx&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
nginxのconfファイルのシンタックスハイライト。完全な感じではない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/language-apache&#34;&gt;language-apache&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
Apache系（htaccessなど）のシンタックスハイライト。公式に取り込んでほしい。&lt;/li&gt;
&lt;li&gt;ちなみにテーマは &lt;a href=&#34;https://atom.io/themes/seti-ui&#34;&gt;Seti-ui&lt;/a&gt; を使ってる。（&lt;a href=&#34;https://atom.io/packages/file-icons&#34;&gt;file-icons&lt;/a&gt;を使わなくてもいいので）&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Atomはまだ起動が遅かったりプラグインの完成度が高くなかったりするけど、少し使い慣れてきたので継続してみる。&lt;br /&gt;
来月（2015年6月）にはメジャーバージョンになるっぽいので期待してる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PackagistとComposerで自作パッケージを使う</title>
      <link>https://kijtra.com/article/original-library-using-composer-packagist</link>
      <pubDate>Wed, 20 May 2015 12:02:00 +0900</pubDate>
      
      <guid>https://kijtra.com/article/original-library-using-composer-packagist</guid>
      <description>

&lt;p&gt;自分で作ったPHPのパッケージ（ライブラリ）を Packagist に登録して、Composer から使えるようにしてみたのでメモ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt; でダウンロードするパッケージは、基本的には &lt;a href=&#34;https://packagist.org/&#34;&gt;Packagist&lt;/a&gt; にあるものからダウンロードされる。&lt;br /&gt;
個人的によく使う自作ライブラリ等も Composer で依存関係を解消しつつ使いたいなあと思ってやってみた。&lt;/p&gt;

&lt;h2 id=&#34;全体の流れ:5c8e7c8b9fb5a02dfee7514e0c72e253&#34;&gt;全体の流れ&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;コードを書く&lt;/li&gt;
&lt;li&gt;（してなければ）&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; にユーザー登録する&lt;/li&gt;
&lt;li&gt;（してなければ）&lt;a href=&#34;https://packagist.org/&#34;&gt;Packagist&lt;/a&gt; にユーザー登録する&lt;/li&gt;
&lt;li&gt;GitHub にリポジトリを作る&lt;/li&gt;
&lt;li&gt;そのリポジトリと Packagist を連携させる&lt;/li&gt;
&lt;li&gt;書いたコードを GitHubリポジトリ にプッシュ&lt;/li&gt;
&lt;li&gt;Packagist に公開（自動）&lt;/li&gt;
&lt;li&gt;Composer から使う&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;まあ普通なら 1 をコピペして済むんだけど Composer から使ってみたかったので。&lt;/p&gt;

&lt;h2 id=&#34;コードを書くにあたって-composer-json-の作成:5c8e7c8b9fb5a02dfee7514e0c72e253&#34;&gt;コードを書くにあたって（composer.json の作成）&lt;/h2&gt;

&lt;p&gt;自作パッケージのルートに &lt;strong&gt;composer.json&lt;/strong&gt; というファイルを作成して、Composer でどう扱ってもらうかを記述する必要がある。&lt;/p&gt;

&lt;p&gt;簡単に作成するには、ルートディレクトリでターミナルやコマンドプロンプトを開き、以下のコマンドを打つ。（&lt;a href=&#34;https://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx&#34;&gt;Composerインストール&lt;/a&gt;済みが前提）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;php composer.phar init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;composer.json を作成するための質問をいくつか訊かれるため、それに入力していくことで自動生成される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# パッケージ名（「ベンダー（ユーザー）名/パッケージ名」の形式）
Package name (&amp;lt;vendor&amp;gt;/&amp;lt;name&amp;gt;) [kijtra/oreore-lib]: kijtra/oreore-lib
# パッケージの概要
Description []: オッス！オラ、オレオレライブラリ！
# 作成者（あなた）
Author [kijtra &amp;lt;kijtra@gmail.com&amp;gt;]:
# 依存パッケージの最低限の安定バージョン（「stable」が無難）
Minimum Stability []: stable
# パッケージの種類（なんでも良いようだけど「library」とかで）
Package Type []: library
# ライセンス（今回はまず自分しか使わないので無保証なMIT）
License []: MIT

Define your dependencies. # 「依存関係を決めてね」

# 依存するパッケージがありますか？
Would you like to define your dependencies (require) interactively [yes]?
# 検索する依存パッケージ名（例：monolog/monolog）
Search for a package: monolog/monolog
# 検索した依存パッケージで使用するバージョン
Enter the version constraint to require (or leave blank to use the latest version): @stable
# ほかに検索する場合（なければそのまま Enter）
Search for a package:
# 開発時に依存するパッケージがありますか？（以降は上記と同じ。なければ「no」）
Would you like to define your dev dependencies (require-dev) interactively [yes]? no

{
    &amp;quot;name&amp;quot;: &amp;quot;kijtra/oreore-lib&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;オッス！オラ、オレオレライブラリ！&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;library&amp;quot;,
    &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
    &amp;quot;require&amp;quot;: {
        &amp;quot;monolog/monolog&amp;quot;: &amp;quot;@stable&amp;quot;
    },
    &amp;quot;authors&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;kijtra&amp;quot;,
            &amp;quot;email&amp;quot;: &amp;quot;kijtra@gmail.com&amp;quot;
        }
    ]
}
# 「上のようなファイルが作られるけどいいかな？」（そのまま Enter）
Do you confirm generation [yes]?

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;strong&gt;composer.json&lt;/strong&gt; が生成されてるはず。&lt;br /&gt;
で、もしPHPのバージョン制限とかあるなら追記しておく。&lt;br /&gt;
また、「autoload」での振る舞いも記述しておくと良いので、最終的な composer.json ファイルは以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;kijtra/oreore-lib&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;オッス！オラ、オレオレライブラリ！&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;library&amp;quot;,
    &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
    &amp;quot;require&amp;quot;: {
        &amp;quot;monolog/monolog&amp;quot;: &amp;quot;@stable&amp;quot;
    },
    &amp;quot;authors&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;kijtra&amp;quot;,
            &amp;quot;email&amp;quot;: &amp;quot;kijtra@gmail.com&amp;quot;
        }
    ],

    //--以下追記--

    &amp;quot;keywords&amp;quot;: [&amp;quot;オレオレ&amp;quot;, &amp;quot;自作&amp;quot;], //（任意）Packagistでの検索でタグ指定できる

    &amp;quot;require&amp;quot;: {
        &amp;quot;php&amp;quot;: &amp;quot;&amp;gt;=5.3.2&amp;quot; //PHP５．３．２以上推奨
    },

    &amp;quot;autoload&amp;quot;: {
        &amp;quot;psr-4&amp;quot;: { //（ファイル構成が）PSR-4形式で作りましたよ
            &amp;quot;Kijtra\\&amp;quot;: &amp;quot;src&amp;quot; //ファイル群は「src」ディレクトリの中ですよ
        }
	},

    &amp;quot;include-path&amp;quot;: [&amp;quot;src/&amp;quot;] //（開発時用）「src」ディレクトリ内からautoload
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;開発時には開発ディレクトリのルートで以下を実行しておき、Composer の基本ファイルをダウンロードする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;php composer.phar install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そうすると vendor ディレクトリが作成され、 vendor/autoload.php が使用できる。&lt;br /&gt;
上記 composer.json の最終行にある &lt;code&gt;&amp;quot;include-path&amp;quot;: [&amp;quot;src/&amp;quot;]&lt;/code&gt; は、この時に必要。&lt;/p&gt;

&lt;p&gt;「PSR-4」というのはPHPでクラスファイルをオートロードする際のディレクトリやファイルの命名規則等のことで、ここでは説明しないので &lt;a href=&#34;https://www.google.co.jp/search?q=PSR-4%E3%81%A8%E3%81%AF&#34;&gt;Googleで「PSR-4とは」&lt;/a&gt; を。&lt;/p&gt;

&lt;h2 id=&#34;github-と-packagist-の連携:5c8e7c8b9fb5a02dfee7514e0c72e253&#34;&gt;GitHub と Packagist の連携&lt;/h2&gt;

&lt;p&gt;パッケージをGitHubに置く前に、Packagist との連携を設定しておく。&lt;/p&gt;

&lt;p&gt;まずは事前に &lt;a href=&#34;https://packagist.org/&#34;&gt;Packagist&lt;/a&gt; の &lt;strong&gt;API Token&lt;/strong&gt; を取得する。&lt;br /&gt;
Packagist のマイページに「&lt;strong&gt;Show API Token&lt;/strong&gt;」というリンクがあるので、クリックすると API Token が表示される。&lt;br /&gt;
それをコピーしておく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lh4.googleusercontent.com/kENdHHVR4B4SfhR7HTv7fdzr2H-6IYAVPAdq2UGByo8=w782-h451-no&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;aligncenter&#34; alt=&#34;Packagist の API Token を取得&#34; src=&#34;https://lh4.googleusercontent.com/kENdHHVR4B4SfhR7HTv7fdzr2H-6IYAVPAdq2UGByo8=w782-h451-no&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;次に &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; に行き、リポジトリを作ったら、そのリポジトリの &lt;strong&gt;Settings 画面&lt;/strong&gt;（右メニュー）に行く。&lt;/p&gt;

&lt;p&gt;左メニューの「&lt;strong&gt;Webhooks &amp;amp; Services&lt;/strong&gt;」というページに行き、「Services」の「&lt;strong&gt;Add service&lt;/strong&gt;」から「&lt;strong&gt;Packagist&lt;/strong&gt;」を検索。&lt;br /&gt;
クリックで追加。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lh3.googleusercontent.com/-JqmxdtL8V_s/VVvekOrNwyI/AAAAAAAADgc/iU_uwNJ-dVw/w1003-h405-no/2015-05-15_103417.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;aligncenter&#34; alt=&#34;「Webhooks &amp;amp; Services」から「Packagist」を検索し追加&#34; src=&#34;https://lh3.googleusercontent.com/-JqmxdtL8V_s/VVvekOrNwyI/AAAAAAAADgc/iU_uwNJ-dVw/w1003-h405-no/2015-05-15_103417.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;入力欄に以下のように入れ、「&lt;strong&gt;Add service&lt;/strong&gt;」ボタンで追加。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt; ・・・Packagist のユーザー名&lt;br /&gt;
&lt;strong&gt;Token&lt;/strong&gt; ・・・Packagist の API Token&lt;br /&gt;
&lt;strong&gt;Domain&lt;/strong&gt; ・・・空のままでOK&lt;br /&gt;
&lt;strong&gt;Active&lt;/strong&gt; ・・・チェックする&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lh6.googleusercontent.com/-5BoKQ-2qUYk/VVvekWQo7II/AAAAAAAADgk/mOGKrutfJNA/w957-h740-no/2015-05-15_104025.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;aligncenter&#34; alt=&#34;「Webhooks &amp;amp; Services」から「Packagist」を検索し追加&#34; src=&#34;https://lh6.googleusercontent.com/-5BoKQ-2qUYk/VVvekWQo7II/AAAAAAAADgk/mOGKrutfJNA/w957-h740-no/2015-05-15_104025.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これで GitHub にプッシュすれば自動的に Packagist に反映されるようになる。&lt;/p&gt;

&lt;h2 id=&#34;バージョン管理:5c8e7c8b9fb5a02dfee7514e0c72e253&#34;&gt;バージョン管理&lt;/h2&gt;

&lt;p&gt;ここまででもう Composer から使える状態なんだけど、パッケージのバージョンをどうリリースするかわからなかったので少しとまどってしまった。&lt;br /&gt;
（デフォルトではバージョンなしで「dev-master」のみ）&lt;/p&gt;

&lt;p&gt;なんてことはない。Git で push する前にタグとしてバージョンを記述するだけだった。&lt;br /&gt;
例えば以下のような感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git add . # Addして
git commit -m &amp;quot;オッス！リリースすっぞ！&amp;quot; # Commitして
git tag -a 0.0.1 # ここでバージョン用タグ作成
git push origin master # Push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コミットの前後とかは関係なさそう？プッシュ前ならどこでもいい？みたいだけど、上記でできてる。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;あとがき:5c8e7c8b9fb5a02dfee7514e0c72e253&#34;&gt;あとがき&lt;/h3&gt;

&lt;p&gt;これまでPHPのパッケージ群といえば &lt;a href=&#34;https://pear.php.net/manual/ja/&#34;&gt;PEAR&lt;/a&gt; だったけど、もう最近では &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt; ばかりになってしまった。&lt;br /&gt;
PEAR はメンテナンスされていないものが多くてインストールも面倒で個人的にはあまり好きじゃなかったので、Composer はけっこう便利に使ってる。&lt;/p&gt;

&lt;p&gt;自作のパッケージを登録しておいて、いつでも（依存関係を解消しつつ）使える状態にしておくのはとても便利だと思った。&lt;/p&gt;

&lt;p&gt;だけど、&lt;a href=&#34;https://packagist.org/&#34;&gt;Packagist&lt;/a&gt; での検索でひっかかってしまうので、あまりにプライベートなものとかはセキュリティ的に危ないまたは恥ずかしくて申し訳ない気持ちに。（GitHub もそうだけど）&lt;br /&gt;
検索にヒットしないように設定できたらいいかも。&lt;/p&gt;

&lt;p&gt;ちなみに今回試しに作ったのは Yahoo JAPAN の &lt;a href=&#34;http://developer.yahoo.co.jp/webapi/map/&#34;&gt;YOLPのAPI&lt;/a&gt; を扱うもの。&lt;/p&gt;

&lt;p&gt;Packagist: &lt;strong&gt;&lt;a href=&#34;https://packagist.org/packages/kijtra/yolp&#34;&gt;kijtra/yolp&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
GitHub: &lt;strong&gt;&lt;a href=&#34;https://github.com/kijtra/yolp&#34;&gt;kijtra/yolp&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;おそらく放置の可能性が高いので composer.json の中身とかを見るぐらいでお願いしますw&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Apps ScriptでOAuthConfigのサポートが終了してTwitter botが危険そうだったので変更</title>
      <link>https://kijtra.com/article/twitter-api-for-google-apps-script-without-oauthconfig</link>
      <pubDate>Thu, 16 Apr 2015 16:06:00 +0900</pubDate>
      
      <guid>https://kijtra.com/article/twitter-api-for-google-apps-script-without-oauthconfig</guid>
      <description>

&lt;p&gt;Google Apps Script でこれまでTwitterのボットを作ってたんだけど、OAuthConfig のサポートが2015年4月20日に終了するってのを見つけて焦って変更したメモ。&lt;/p&gt;

&lt;p&gt;これまでGoogle Apps ScriptでTwitter APIを利用する場合、OAuth認証に「&lt;strong&gt;&lt;a href=&#34;https://developers.google.com/apps-script/reference/url-fetch/o-auth-config&#34;&gt;OAuthConfig&lt;/a&gt;&lt;/strong&gt;」というクラスを使うのが一般的だった。&lt;br /&gt;
でも先日見てみると以下の一文が。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Google&amp;rsquo;s OAuth 1.0 support was deprecated in 2012 and is scheduled to be shut down on April 20, 2015. Scripts using OAuthConfig to connect to a Google API should instead use the &lt;a href=&#34;https://github.com/googlesamples/apps-script-oauth2&#34;&gt;OAuth2 for Apps Script&lt;/a&gt; library.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;英語はあまり得意でないのでGoogleで翻訳すると、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;警告：GoogleのOAuthの1.0のサポートは2012年に廃止されましたし、OAuthConfigを使用して2015年のスクリプトではなくAppsスクリプトライブラリのOAuth2を使用する必要があり、GoogleのAPIに接続するために、4月20日にシャットダウンされる予定です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とのこと。&lt;br /&gt;
確かに OAuthConfig を使用したプログラムを動かすと警告が出てる。&lt;br /&gt;
まずいなー自作せんといかんかなーと思っていろいろと調べてみたところ、&lt;strong&gt;&lt;a href=&#34;https://github.com/googlesamples/apps-script-oauth1&#34;&gt;Googleが用意したOAuth1用ライブラリ(GitHub)&lt;/a&gt;&lt;/strong&gt;を使うのが良さそうな感じだったので、手順をまとめておく。&lt;/p&gt;

&lt;h2 id=&#34;step1-プロジェクトの作成:1654966ff700aeb4f8ee7d95b62403f2&#34;&gt;Step1. プロジェクトの作成&lt;/h2&gt;

&lt;p&gt;プロジェクトといっても単にGoogleドライブにファイルを作るだけ。&lt;br /&gt;
スプレッドシートを新規作成して上部メニュー「ツール」→「スクリプトエディタ」にいくか、またはスクリプトファイル自体を新規作成してもOK。&lt;br /&gt;
ログの記録とかにスプレッドシートが使えるので、できれば前者がいいと思う。&lt;/p&gt;

&lt;h2 id=&#34;step2-oauthライブラリの取得:1654966ff700aeb4f8ee7d95b62403f2&#34;&gt;Step2. OAuthライブラリの取得&lt;/h2&gt;

&lt;p&gt;スクリプトエディタを開き、上部メニュー「リソース」→「ライブラリ&amp;hellip;」をクリック。&lt;br /&gt;
開いたダイアログにある「ライブラリを検索」の入力欄に以下の文字を入力して検索（「選択」ボタン）する。
&lt;code&gt;Mb2Vpd5nfD3Pz-_a-39Q4VfxhMjh3Sh48&lt;/code&gt;&lt;br /&gt;
そうすると、以下の図のようにOAuth1用ライブラリが出るので、最新バージョンを選択して「保存」する。（Google製のライブラリなのでご安心を）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lh5.googleusercontent.com/-Y0JexgZ4FLY/VS9jkx9CPdI/AAAAAAAADfo/qjpCGInBkwQ/w694-h417-no/2015-04-16_120428.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;aligncenter&#34; alt=&#34;ライブラリ読み込みダイアログ&#34; src=&#34;https://lh5.googleusercontent.com/-Y0JexgZ4FLY/VS9jkx9CPdI/AAAAAAAADfo/qjpCGInBkwQ/w694-h417-no/2015-04-16_120428.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これでとりあえずはOAuth1ライブラリが使えるようになった。&lt;br /&gt;
ちなみにこれらの手順は &lt;a href=&#34;https://github.com/googlesamples/apps-script-oauth1/blob/master/README.md&#34;&gt;公式GitHubのREADME&lt;/a&gt; に書いてある。&lt;/p&gt;

&lt;h2 id=&#34;step3-twitter-api用スクリプトの作成:1654966ff700aeb4f8ee7d95b62403f2&#34;&gt;Step3. Twitter API用スクリプトの作成&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/googlesamples/apps-script-oauth1/blob/master/README.md&#34;&gt;公式GitHubのREADME&lt;/a&gt; の通りに進めて問題ないけど、ここらへんは以下のスクリプトを自作した。&lt;br /&gt;
&lt;a href=&#34;https://gist.github.com/kijtra/f4cdd8775277372d42f7&#34;&gt;&lt;i class=&#34;fa fa-github&#34;&gt;&lt;/i&gt; Gistにあり〼。&lt;/a&gt;&lt;br /&gt;
これを「twitter.gs」等のファイル名でプロジェクトエディタに新規作成＆コピペする。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kijtra/f4cdd8775277372d42f7.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;step4-twitterアプリ側の設定:1654966ff700aeb4f8ee7d95b62403f2&#34;&gt;Step4. Twitterアプリ側の設定&lt;/h2&gt;

&lt;p&gt;OAuth後のコールバック先URLをこれまでと変更する必要がある。&lt;br /&gt;
&lt;a href=&#34;https://apps.twitter.com/&#34;&gt;Twitterアプリの管理ページ&lt;/a&gt;で、&lt;strong&gt;Callback URL&lt;/strong&gt;に以下のようなURLを設定する。&lt;br /&gt;
&lt;code&gt;https://script.google.com/macros/d/[プロジェクト キー]/usercallback&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lh6.googleusercontent.com/-mEGyfYGF2Ng/VS9jmDNTSoI/AAAAAAAADfo/LddrM3jl43w/w1056-h259-no/2015-04-16_162213.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;aligncenter&#34; alt=&#34;コールバックURLの入力欄&#34; src=&#34;https://lh6.googleusercontent.com/-mEGyfYGF2Ng/VS9jmDNTSoI/AAAAAAAADfo/LddrM3jl43w/w1056-h259-no/2015-04-16_162213.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「&lt;strong&gt;プロジェクト キー&lt;/strong&gt;」というのは、Google Apps Scriptのプロジェクトに付いているキー。&lt;br /&gt;
スクリプトエディタの上部メニュー「ファイル」→「プロジェクトのプロパティ」をクリックすると確認できる。&lt;br /&gt;
このキーは前述の自作スクリプト内でも使うので、ついでにコピペしておく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lh4.googleusercontent.com/-ma8FgouRKmI/VS9jlBunX3I/AAAAAAAADfo/aCYvvWZdlXI/w586-h427-no/2015-04-16_123848.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;aligncenter&#34; alt=&#34;プロジェクト キーの確認&#34; src=&#34;https://lh4.googleusercontent.com/-ma8FgouRKmI/VS9jlBunX3I/AAAAAAAADfo/aCYvvWZdlXI/w586-h427-no/2015-04-16_123848.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;step5-oauth認証する:1654966ff700aeb4f8ee7d95b62403f2&#34;&gt;Step5. OAuth認証する&lt;/h2&gt;

&lt;p&gt;自作スクリプトに、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プロジェクト キー&lt;/li&gt;
&lt;li&gt;Twitterの Consumer Key&lt;/li&gt;
&lt;li&gt;Twitterの Consumer Secre&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を記載したら、初回のOAuth認証用にいくつかの関数を用意しているので、「&lt;code&gt;twitterAuthorizeUrl&lt;/code&gt;」というのを実行する。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lh4.googleusercontent.com/-fLiwVXhwWyY/VS9jlgKjH7I/AAAAAAAADfo/M6o0jDoBTUQ/w399-h164-no/2015-04-16_143608.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;aligncenter&#34; alt=&#34;OAuth用関数の実行&#34; src=&#34;https://lh4.googleusercontent.com/-fLiwVXhwWyY/VS9jlgKjH7I/AAAAAAAADfo/M6o0jDoBTUQ/w399-h164-no/2015-04-16_143608.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;画面には何も出ないけど、上部メニュー「表示」→「ログ」を開くと承認用のURLが出力されている。
これをコピーしてブラウザでアクセスすると、Twitterのアプリ承認画面に行くので承認する。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lh4.googleusercontent.com/-dDk3p-mvLBY/VS9jlrsIrSI/AAAAAAAADfo/MPlKB5rDy9A/w684-h442-no/2015-04-16_143941.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;aligncenter&#34; alt=&#34;OAuth認証用URLをコピーする&#34; src=&#34;https://lh4.googleusercontent.com/-dDk3p-mvLBY/VS9jlrsIrSI/AAAAAAAADfo/MPlKB5rDy9A/w684-h442-no/2015-04-16_143941.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここまでの手順が正しく設定されていれば、承認後は画面が切り替わって「認証に成功しました」という文字が出る（ハズ）。&lt;/p&gt;

&lt;h2 id=&#34;step6-テストする:1654966ff700aeb4f8ee7d95b62403f2&#34;&gt;Step6. テストする&lt;/h2&gt;

&lt;p&gt;これでOAuth認証が通ったと思うのでボットが作成できる。&lt;br /&gt;
ツイッターのAPI自体は&lt;a href=&#34;https://dev.twitter.com/rest/public&#34;&gt;公式 REST API ドキュメント&lt;/a&gt;を参照のこと。
簡単に自作スクリプトの説明をしておくと、こんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;///// 基本的な使用方法 /////

// 以下は api.twitter.com/1.1/statuses/update.json を実行する例

var data = {
    &amp;quot;status&amp;quot;: &amp;quot;ツイート文&amp;quot;
};

var res = Twitter.api(&amp;quot;statuses/update&amp;quot;, data);

/*
第一引数：APIのパス（api.twitter.com/1.1/～.jsonの間のパス）
第二引数：パラメータ（JSON形式）
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の他にいくつか簡易化した関数を用意した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ツイートを検索
var res = Twitter.search(&amp;quot;検索文字&amp;quot;);

// 自分のタイムラインを取得
var res = Twitter.tl();

// 特定ユーザーのタイムラインを取得
var res = Twitter.usertl(&amp;quot;スクリーンネーム&amp;quot;);

// ツイートする
var res = Twitter.tweet(&amp;quot;ツイート文&amp;quot;);

// トレンドの取得（デフォルトは日本全国対象。引数にWOEID指定でその地域のトレンド）
var res = Twitter.trends();

// トレンドのワードのみ取得（引数は上と同じ）
var res = Twitter.trendWords();
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;OAuthConfigの廃止はけっこう前から警告が出てたみたいだけど、対策しているような情報はググってもほとんど見当たらなかったので、Google Apps Scriptでボット作ってる人はほとんどいない模様w&lt;br /&gt;
以前 &lt;a href=&#34;https://kijtra.com/article/twitter-backup-to-google-drive/&#34;&gt;Twitterの自分の過去ツイートをGoogleドライブに自動バックアップ（＆公開）する方法&lt;/a&gt; という投稿を書いたけど、こちらもOAuthを使っていて不安。&lt;br /&gt;
提供元には特に何か対策してるっぽいことは書いてなさそう・・・動いてるからまあいいけど。&lt;/p&gt;

&lt;p&gt;ついでに &lt;a href=&#34;https://dev.twitter.com/oauth/application-only&#34;&gt;OAuth2でのTwitter API（Application-only authentication）&lt;/a&gt; も少し見てみたんだけど、わりと簡単なプログラムでデータを取得できるみたい。&lt;br /&gt;
接続が簡単なかわりに更新系のAPIが利用できなかったりするけど、API使用階数の制限が少し緩和されるっぽい・・・？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>モーダル用jQueryプラグインをつくった</title>
      <link>https://kijtra.com/article/jquery-modal</link>
      <pubDate>Wed, 11 Mar 2015 00:20:00 +0900</pubDate>
      
      <guid>https://kijtra.com/article/jquery-modal</guid>
      <description>

&lt;p&gt;なかなか理想のモーダル用スクリプトが見つからなかったので勉強を兼ねて作ってみた。&lt;br /&gt;
なるべく実用的なものにしたつもり・・・。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kijtra/modaled&#34;&gt;ソースは Github にあり〼。&lt;/a&gt;
&lt;iframe src=&#34;https://ghbtns.com/github-btn.html?user=kijtra&amp;repo=modaled&amp;type=star&amp;count=true&#34; frameborder=&#34;0&#34; scrolling=&#34;0&#34; width=&#34;170px&#34; height=&#34;20px&#34; style=&#34;margin:0 0 0 10px;vertical-align:middle;&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;使用例-examples:7c9faca7886f5760dfa28e395b5e5a30&#34;&gt;使用例 (examples)&lt;/h2&gt;

&lt;h3 id=&#34;a-href-demo1-class-modaled-インライン要素-inline-a:7c9faca7886f5760dfa28e395b5e5a30&#34;&gt;&lt;a href=&#34;#demo1&#34; class=&#34;modaled&#34;&gt;インライン要素 (inline)&lt;/a&gt;&lt;/h3&gt;

&lt;div id=&#34;demo1&#34; style=&#34;display:none&#34;&gt;
    インライン要素の内容です。&lt;br&gt;
    &amp;lt;a&amp;gt;タグの href と同じIDを持つ要素が表示されます。&lt;br&gt;
    また、&amp;lt;a&amp;gt;タグに href=&#34;#close&#34; を指定したリンクは閉じるボタンになります。&lt;br&gt;
    &lt;a href=&#34;#close&#34;&gt;CLOSE&lt;/a&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- 発火するリンク --&amp;gt;
&amp;lt;a href=&amp;quot;#demo1&amp;quot; class=&amp;quot;modaled&amp;quot;&amp;gt;インライン要素 (inline)&amp;lt;/a&amp;gt;

&amp;lt;!-- 表示する内容 --&amp;gt;
&amp;lt;div id=&amp;quot;demo1&amp;quot; style=&amp;quot;display:none&amp;quot;&amp;gt;
	...
&amp;lt;/div&amp;gt;

&amp;lt;!-- スクリプト --&amp;gt;
&amp;lt;script&amp;gt;
$(&#39;.modaled&#39;).modaled();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;a-href-static-jquery-modal-demo2-html-class-modaled-rel-nofollow-別ページ-同ドメイン内のみ-ajax-a:7c9faca7886f5760dfa28e395b5e5a30&#34;&gt;&lt;a href=&#34;https://kijtra.com/static/jquery-modal/demo2.html&#34; class=&#34;modaled&#34; rel=&#34;nofollow&#34;&gt;別ページ ※同ドメイン内のみ (ajax)&lt;/a&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- 発火するリンク --&amp;gt;
&amp;lt;a href=&amp;quot;/static/jquery-modal/demo2.html&amp;quot; class=&amp;quot;modaled&amp;quot;&amp;gt;別ページ ※同ドメイン内のみ (ajax)&amp;lt;&amp;lt;/a&amp;gt;

&amp;lt;!-- スクリプト --&amp;gt;
&amp;lt;script&amp;gt;
$(&#39;.modaled&#39;).modaled();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;a-href-http-i-giphy-com-fz9wcnzeff5yu-gif-class-modaled-rel-nofollow-画像-別ドメイン可-image-a:7c9faca7886f5760dfa28e395b5e5a30&#34;&gt;&lt;a href=&#34;http://i.giphy.com/fz9wCNZeff5yU.gif&#34; class=&#34;modaled&#34; rel=&#34;nofollow&#34;&gt;画像 ※別ドメイン可 (image)&lt;/a&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- 発火するリンク --&amp;gt;
&amp;lt;a href=&amp;quot;http://i.giphy.com/fz9wCNZeff5yU.gif&amp;quot; class=&amp;quot;modaled&amp;quot;&amp;gt;画像 ※別ドメイン可 (image)&amp;lt;/a&amp;gt;

&amp;lt;!-- スクリプト --&amp;gt;
&amp;lt;script&amp;gt;
$(&#39;.modaled&#39;).modaled();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;a-href-demo4-class-modaled-内容切り替え-other-modal-a:7c9faca7886f5760dfa28e395b5e5a30&#34;&gt;&lt;a href=&#34;#demo4&#34; class=&#34;modaled&#34;&gt;内容切り替え (other modal)&lt;/a&gt;&lt;/h3&gt;

&lt;div id=&#34;demo4&#34; style=&#34;display:none&#34;&gt;
    読み込んだモーダルの &amp;lt;a&amp;gt;タグにも適用されます。&lt;br&gt;
    NEXT : &lt;a href=&#34;https://kijtra.com/static/jquery-modal/demo4.html&#34; class=&#34;modaled&#34;&gt;demo4.html&lt;/a&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- 発火するリンク --&amp;gt;
&amp;lt;a href=&amp;quot;#demo4&amp;quot; class=&amp;quot;modaled&amp;quot;&amp;gt;内容切り替え (other modal)&amp;lt;/a&amp;gt;

&amp;lt;!-- 表示する内容 --&amp;gt;
&amp;lt;div id=&amp;quot;demo4&amp;quot; style=&amp;quot;display:none&amp;quot;&amp;gt;
	...
	NEXT : &amp;lt;a href=&amp;quot;/static/jquery-modal/demo4.html&amp;quot; class=&amp;quot;modaled&amp;quot;&amp;gt;demo4.html&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;!-- スクリプト --&amp;gt;
&amp;lt;script&amp;gt;
$(&#39;.modaled&#39;).modaled();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;a-href-demo5-モーダル内のヘッダ-フッタ-header-and-footer-a:7c9faca7886f5760dfa28e395b5e5a30&#34;&gt;&lt;a href=&#34;#demo5&#34;&gt;モーダル内のヘッダ・フッタ (header and footer)&lt;/a&gt;&lt;/h3&gt;

&lt;div id=&#34;demo5&#34; style=&#34;display:none&#34;&gt;
    初期状態では全くデザインされていないので、自分でデザインする必要があります。&lt;br&gt;
    デフォルトではヘッダには「header」、&lt;br&gt;
    フッタには「footer」というclass名がついています。&lt;br&gt;
    ※クラス名は設定で変更できます。
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- 発火するリンク --&amp;gt;
&amp;lt;a href=&amp;quot;#demo5&amp;quot;&amp;gt;モーダル内のヘッダ・フッタ (header and footer)&amp;lt;/a&amp;gt;

&amp;lt;!-- 表示する内容 --&amp;gt;
&amp;lt;div id=&amp;quot;demo5&amp;quot; style=&amp;quot;display:none&amp;quot;&amp;gt;
	...
&amp;lt;/div&amp;gt;

&amp;lt;!-- スクリプト --&amp;gt;
&amp;lt;script&amp;gt;
$(&#39;a[href=&amp;quot;#demo5&amp;quot;]&#39;).modaled({
	header: &#39;&amp;lt;i&amp;gt;ヘッダです (header)&amp;lt;/i&amp;gt;&#39;,
	footer: &#39;&amp;lt;i&amp;gt;フッタです (footer)&amp;lt;/i&amp;gt;　&amp;lt;a href=&amp;quot;#close&amp;quot;&amp;gt;CLOSE&amp;lt;/a&amp;gt;&#39;,
	headerClass: &#39;ヘッダのclass名&#39;,
	footerClass: &#39;フッタのclass名&#39;
});
&amp;lt;/script&amp;gt;

&amp;lt;!-- または、やや強引ですが表示する内容の data-* 属性に直接設定を書くこともできます --&amp;gt;
&amp;lt;div id=&amp;quot;demo5&amp;quot; style=&amp;quot;display:none&amp;quot; data-header=&amp;quot;&amp;lt;i&amp;gt;ヘッダです (header)&amp;lt;/i&amp;gt;&amp;quot; data-footer=&amp;quot;&amp;lt;i&amp;gt;フッタです (footer)&amp;lt;/i&amp;gt;&amp;quot;&amp;gt;
	...
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;a-href-demo6-1-アニメーション例1-animation-example-1-a:7c9faca7886f5760dfa28e395b5e5a30&#34;&gt;&lt;a href=&#34;#demo6-1&#34;&gt;アニメーション例1 (animation example 1)&lt;/a&gt;&lt;/h3&gt;

&lt;div id=&#34;demo6-1&#34; style=&#34;display:none&#34;&gt;
    アニメーションは設定で指定できます。&lt;br&gt;
    これは以下のように指定した例です。
&lt;pre class=&#34;highlight json&#34;&gt;{
    acShow : &#39;bounceIn&#39;,
    acHide : &#39;bounceOut&#39;
}&lt;/pre&gt;
    &lt;a href=&#34;#close&#34;&gt;CLOSE&lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&#34;a-href-demo6-2-data-ac-show-rotatein-data-ac-hide-hinge-アニメーション例2-animation-example-2-a:7c9faca7886f5760dfa28e395b5e5a30&#34;&gt;&lt;a href=&#34;#demo6-2&#34; data-ac-show=&#34;rotateIn&#34; data-ac-hide=&#34;hinge&#34;&gt;アニメーション例2 (animation example 2)&lt;/a&gt;&lt;/h3&gt;

&lt;div id=&#34;demo6-2&#34; style=&#34;display:none&#34;&gt;
    これはリンク自体に data-* 属性を使って指定しています。&lt;br&gt;
    表示対象の &amp;lt;div&amp;gt; 等の方に data-* 属性で指定することもできます。&lt;br&gt;
    &lt;a href=&#34;#close&#34;&gt;CLOSE&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;アニメーションには &lt;a href=&#34;http://daneden.github.io/animate.css/&#34; target=&#34;_blank&#34;&gt;Animate.css&lt;/a&gt; が必要です&lt;/strong&gt;。&lt;br /&gt;
Animate.cssが読み込まれていれば自動的にアニメーション表示になります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- Animate.cssの読み込み --&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.1/animate.min.css&amp;quot;&amp;gt;

&amp;lt;!-- 発火するリンク --&amp;gt;
&amp;lt;a href=&amp;quot;#demo6-1&amp;quot;&amp;gt;アニメーション例1 (animation example 1)&amp;lt;/a&amp;gt;

&amp;lt;!-- 表示する内容 --&amp;gt;
&amp;lt;div id=&amp;quot;demo6-1&amp;quot; style=&amp;quot;display:none&amp;quot;&amp;gt;
	...
&amp;lt;/div&amp;gt;

&amp;lt;a href=&amp;quot;#demo6-2&amp;quot; data-ac-show=&amp;quot;rotateIn&amp;quot; data-ac-hide=&amp;quot;hinge&amp;quot;&amp;gt;アニメーション例2 (animation example 2)&amp;lt;/a&amp;gt;

&amp;lt;div id=&amp;quot;demo6-2&amp;quot; style=&amp;quot;display:none&amp;quot;&amp;gt;
	...
&amp;lt;/div&amp;gt;

&amp;lt;!-- スクリプト --&amp;gt;
&amp;lt;script&amp;gt;
$(&#39;a[href=&amp;quot;#demo6-1&amp;quot;]&#39;).modaled({
	acShow: &#39;bounceIn&#39;,
	acHide: &#39;bounceOut&#39;
});

$(&#39;a[href=&amp;quot;#demo6-2&amp;quot;]&#39;).modaled();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;a-href-demo7-デザイン例-design-example-a:7c9faca7886f5760dfa28e395b5e5a30&#34;&gt;&lt;a href=&#34;#demo7&#34;&gt;デザイン例 (design example)&lt;/a&gt;&lt;/h3&gt;

&lt;div id=&#34;demo7&#34; style=&#34;display:none&#34;&gt;
    すこしデザインした例です。&lt;br&gt;
    基本的にはデザインは自分でやる方向です。&lt;br&gt;
    &lt;a href=&#34;http://getbootstrap.com/&#34; target=&#34;_blank&#34;&gt;Bootstrap&lt;/a&gt; 等を使っている場合は class名が衝突したりするのでご注意ください。
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- 発火するリンク --&amp;gt;
&amp;lt;a href=&amp;quot;#demo7&amp;quot;&amp;gt;デザイン例 (design example)&amp;lt;/a&amp;gt;

&amp;lt;!-- 表示する内容 --&amp;gt;
&amp;lt;div id=&amp;quot;demo7&amp;quot; style=&amp;quot;display:none&amp;quot;&amp;gt;
	...
&amp;lt;/div&amp;gt;
&amp;lt;!-- スクリプト --&amp;gt;
&amp;lt;script&amp;gt;
$(&#39;a[href=&amp;quot;#demo7&amp;quot;]&#39;).modaled({
	header: &#39;&amp;lt;h3&amp;gt;&amp;lt;i class=&amp;quot;fa fa-leaf&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; デザイン例&amp;lt;/h3&amp;gt;&amp;lt;a href=&amp;quot;#close&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/a&amp;gt;&#39;,
	footer: &#39;&amp;lt;a href=&amp;quot;#close&amp;quot;&amp;gt;&amp;lt;i class=&amp;quot;fa fa-check-circle&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; 閉じる&amp;lt;/a&amp;gt;&#39;,
	containerClass: &#39;my-modal&#39;,
	headerClass: &#39;my-header&#39;,
	footerClass: &#39;my-footer&#39;,
	contentClass: &#39;my-content&#39;,
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;a-href-demo8-1-class-modaled-オーバーレイのクリックで閉じさせない-disable-overlay-click-a:7c9faca7886f5760dfa28e395b5e5a30&#34;&gt;&lt;a href=&#34;#demo8-1&#34; class=&#34;modaled&#34;&gt;オーバーレイのクリックで閉じさせない (disable overlay click)&lt;/a&gt;&lt;/h3&gt;

&lt;div id=&#34;demo8-1&#34; style=&#34;display:none&#34; data-overlay-hide-disable=&#34;true&#34;&gt;
    オーバーレイをクリックしても閉じさせない形式です。&lt;br&gt;
    必ずリンクをクリックさせたい場合等に使えるかもしれません。&lt;br&gt;
    また、この次に表示されるモーダルでは自動で閉じる設定がされています。&lt;br&gt;
    &lt;br&gt;
    &lt;div style=&#34;text-align:center;font-weight:bold;&#34;&gt;&lt;a href=&#34;#demo8-2&#34; class=&#34;modaled&#34;&gt;OK!&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;demo8-2&#34; style=&#34;display:none&#34; data-auto-hide=&#34;2000&#34;&gt;
    ありがとうございます！&lt;br&gt;
    ※自動で閉じます (auto hide after 2000ms)
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- 発火するリンク --&amp;gt;
&amp;lt;a href=&amp;quot;#demo8-1&amp;quot; class=&amp;quot;modaled&amp;quot;&amp;gt;オーバーレイのクリックで閉じさせない (disable overlay click)&amp;lt;/a&amp;gt;

&amp;lt;!-- 表示する内容1 --&amp;gt;
&amp;lt;div id=&amp;quot;demo8-1&amp;quot; style=&amp;quot;display:none&amp;quot; data-overlay-hide-disable=&amp;quot;true&amp;quot;&amp;gt;
	...
&amp;lt;/div&amp;gt;

&amp;lt;!-- 表示する内容2（クリック後） --&amp;gt;
&amp;lt;div id=&amp;quot;demo8-2&amp;quot; style=&amp;quot;display:none&amp;quot; data-auto-hide=&amp;quot;2000&amp;quot;&amp;gt;
	...
&amp;lt;/div&amp;gt;

&amp;lt;!-- スクリプト --&amp;gt;
&amp;lt;script&amp;gt;
$(&#39;.modaled&#39;).modaled();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;ダイナミック表示-dynamic-open:7c9faca7886f5760dfa28e395b5e5a30&#34;&gt;ダイナミック表示 (dynamic open)&lt;/h3&gt;

&lt;p&gt;最初に表示されたものです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- スクリプト --&amp;gt;
&amp;lt;script&amp;gt;
$.modaled(&#39;Welcome!&amp;lt;br&amp;gt;これはモーダルの見本です。&amp;lt;br&amp;gt;&amp;lt;a href=&amp;quot;#close&amp;quot;&amp;gt;CLOSE&amp;lt;/a&amp;gt;&#39;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;特徴-feature:7c9faca7886f5760dfa28e395b5e5a30&#34;&gt;特徴 (feature)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;IE8+&lt;/li&gt;
&lt;li&gt;レスポンシブ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://daneden.github.io/animate.css/&#34; target=&#34;_blank&#34;&gt;Animate.css&lt;/a&gt; 対応&lt;/li&gt;
&lt;li&gt;ダイナミック表示対応&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;オプション-options:7c9faca7886f5760dfa28e395b5e5a30&#34;&gt;オプション (options)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;header&lt;/code&gt; - default: empty&lt;br /&gt;
ヘッダ用HTML&lt;/li&gt;
&lt;li&gt;&lt;code&gt;footer&lt;/code&gt; - default: empty&lt;br /&gt;
フッタ用HTML&lt;/li&gt;
&lt;li&gt;&lt;code&gt;containerClass&lt;/code&gt; - default: &amp;lsquo;modal-container&amp;rsquo;&lt;br /&gt;
表示モーダル全体を包む&amp;lt;div&amp;gt;のclass名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;headerClass&lt;/code&gt; - default: empty&lt;br /&gt;
ヘッダのclass名（ヘッダがある場合）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;footerClass&lt;/code&gt; - default: empty&lt;br /&gt;
フッタのclass名（フッタがある場合）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contentClass&lt;/code&gt; - default: empty&lt;br /&gt;
表示コンテンツ部分のclass名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;overlayHideDisable&lt;/code&gt; - default: false&lt;br /&gt;
オーバーレイクリックで閉じさせないかどうか&lt;/li&gt;
&lt;li&gt;&lt;code&gt;overlayOpacity&lt;/code&gt; - default: 0.2&lt;br /&gt;
オーバーレイの透明度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autoHide&lt;/code&gt; - default: 0&lt;br /&gt;
自動で閉じる場合のミリ秒（ms）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preload&lt;/code&gt; - default: false&lt;br /&gt;
リンクコンテンツの場合に先読みするかどうか&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acShow&lt;/code&gt; - default: &amp;lsquo;fadeInDown&amp;rsquo;&lt;br /&gt;
モーダル表示時のアニメーションclass名（Animate.css）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acHide&lt;/code&gt; - default: &amp;lsquo;fadeOutDown&amp;rsquo;&lt;br /&gt;
モーダルを閉じる時のアニメーションclass名（Animate.css）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acChangeHide&lt;/code&gt; - default: &amp;lsquo;flipOutY&amp;rsquo;&lt;br /&gt;
モーダル切り替え時に非表示にするアニメーションclass名（Animate.css）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acChangeShow&lt;/code&gt; - default: &amp;lsquo;flipInY&amp;rsquo;&lt;br /&gt;
モーダル切り替え時に表示するアニメーションclass名（Animate.css）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acSpinShow&lt;/code&gt; - default: &amp;lsquo;zoomIn&amp;rsquo;&lt;br /&gt;
読み込み中（loading）表示するアニメーションclass名（Animate.css）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acSpinHide&lt;/code&gt; - default: &amp;lsquo;zoomOut&amp;rsquo;&lt;br /&gt;
読み込み中（loading）を非表示にするアニメーションclass名（Animate.css）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acOverlayHideDisable&lt;/code&gt; - default: &amp;lsquo;wobble&amp;rsquo;&lt;br /&gt;
オーバーレイクリック拒否時のアニメーションclass名（Animate.css）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beforeShow&lt;/code&gt; - default: null&lt;br /&gt;
モーダル表示直前に実行される関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;afterShow&lt;/code&gt; - default: null&lt;br /&gt;
モーダル表示直後に実行される関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beforeClose&lt;/code&gt; - default: null&lt;br /&gt;
モーダル非表示直前に実行される関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;afterClose&lt;/code&gt; - default: null&lt;br /&gt;
モーダル非表示直後に実行される関数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;デフォルトオプションの設定方法は以下です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$.modaled.defaults({
	header: &#39;&amp;lt;div class=&amp;quot; ...&#39;,
	overlayOpacity: 0.3,
	beforeShow: function(content, option) {
		...
	}
	...
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>PHPで変数を便利にSet/Getする関数をつくった</title>
      <link>https://kijtra.com/article/php-function-vars</link>
      <pubDate>Tue, 10 Feb 2015 09:50:00 +0900</pubDate>
      
      <guid>https://kijtra.com/article/php-function-vars</guid>
      <description>&lt;p&gt;PHPでグローバルな変数を扱う時に &lt;code&gt;$GLOBALS&lt;/code&gt; とか &lt;a href=&#34;http://php.net/manual/ja/language.variables.superglobals.php&#34;&gt;スーパーグローバル変数&lt;/a&gt; の汚染とかあんまり使いたくなかったので、手軽にできる関数を作った。&lt;/p&gt;

&lt;p&gt;まずはコード。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kijtra/78c54a12cfbf3c4432f3.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;第一引数がキー、第二引数が値で、値がある場合はSet、値がない場合はGetになる。&lt;br /&gt;
基本的な使い方としては以下のような感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

// キーを「A」、値を「B」とした変数のセット
vars(&#39;A&#39;, &#39;B&#39;);

// キー「A」を取得
echo vars(&#39;A&#39;); //　-&amp;gt; &amp;quot;B&amp;quot;



// 「A」を上書き
vars(&#39;A&#39;, &#39;Aval&#39;);

// 再びキー「A」を取得
echo vars(&#39;A&#39;); //　-&amp;gt; &amp;quot;Aval&amp;quot;



// もちろん多次元配列などもセット可能
$value = array(
    &#39;C1&#39; =&amp;gt; &#39;C1val&#39;,
    &#39;C2&#39; =&amp;gt; array(
        &#39;C2-1&#39; =&amp;gt; &#39;C2-1val&#39;,
        &#39;C2-2&#39; =&amp;gt; &#39;C2-2val&#39;,
        &#39;C2-3&#39; =&amp;gt; &#39;C2-3val&#39;,
    )
);
vars(&#39;C&#39;, $value);



// 引数なしの場合はセットした全部を取得
$all = vars();
/*
array(
    &#39;A&#39; =&amp;gt; &#39;Aval&#39;,
    &#39;C&#39; =&amp;gt; array(
        &#39;C1&#39; =&amp;gt; &#39;C1val&#39;,
        &#39;C2&#39; =&amp;gt; array(
            &#39;C2-1&#39; =&amp;gt; &#39;C2-1val&#39;,
            &#39;C2-2&#39; =&amp;gt; &#39;C2-2val&#39;,
            &#39;C2-3&#39; =&amp;gt; &#39;C2-3val&#39;
        )
    )
)
*/


// 存在しないキーの場合はnull
var_dump(vars(&#39;who&#39;)); // -&amp;gt; null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大きな特徴は、多次元配列を入れた時に下層の配列へは &lt;strong&gt;ドットつなぎの文字列で簡単にアクセスできる&lt;/strong&gt; 点。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
// 上の例でセットした「C2-2」の値を取得
echo vars(&#39;C.C2.C2-2&#39;); // -&amp;gt; &amp;quot;C2-2val&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、下層の配列の一部を上書きしたいことがあるけど、その場合もドットつなぎで。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
// 上の例でセットした「C2-2」の値を再セット
vars(&#39;C.C2.C2-2&#39;, &#39;C2-2 is override!&#39;);

echo vars(&#39;C.C2.C2-2&#39;); // -&amp;gt; &amp;quot;C2-2 is override!&amp;quot;


// この時、「C」の配列全体は以下のようになっている
array(
    &#39;C1&#39; =&amp;gt; &#39;C1val&#39;,
    &#39;C2&#39; =&amp;gt; array(
        &#39;C2-1&#39; =&amp;gt; &#39;C2-1val&#39;,
        &#39;C2-2&#39; =&amp;gt; &#39;C2-2 is override!&#39;, // ここだけ上書き済み
        &#39;C2-3&#39; =&amp;gt; &#39;C2-3val&#39;,
    )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ドットつなぎでの取得は &lt;code&gt;static&lt;/code&gt; 変数でプチキャッシュしてるので2回目以降は速いはず。&lt;/p&gt;

&lt;p&gt;あと、関数内で &lt;code&gt;array_replace_recursive&lt;/code&gt; という関数を使ってる。&lt;br /&gt;
これは PHP5.3 からの機能なので、それ以下のバージョンの場合は &lt;a href=&#34;http://php.net/manual/ja/function.array-replace-recursive.php#109390&#34;&gt;公式ドキュメントにあるユーザー関数&lt;/a&gt; を書いておく必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
if (!function_exists(&#39;array_replace_recursive&#39;))
{
	// http://php.net/manual/ja/function.array-replace-recursive.php#109390
	function array_replace_recursive($base, $replacements)
	{
		foreach (array_slice(func_get_args(), 1) as $replacements) {
			$bref_stack = array(&amp;amp;$base);
			$head_stack = array($replacements);

			do {
				end($bref_stack);

				$bref = &amp;amp;$bref_stack[key($bref_stack)];
				$head = array_pop($head_stack);

				unset($bref_stack[key($bref_stack)]);

				foreach (array_keys($head) as $key) {
					if (isset($key, $bref) &amp;amp;&amp;amp; is_array($bref[$key]) &amp;amp;&amp;amp; is_array($head[$key])) {
						$bref_stack[] = &amp;amp;$bref[$key];
						$head_stack[] = $head[$key];
					} else {
						$bref[$key] = $head[$key];
					}
				}
			} while(count($head_stack));
		}

		return $base;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;余談だけど、この &lt;code&gt;vars&lt;/code&gt; は個人的によく使ってる関数なんだけど、関数名がなんかしっくりこない。&lt;br /&gt;
&lt;code&gt;var()&lt;/code&gt; という名前は予約後で使えないので、よく使うので短く書くために &lt;code&gt;v()&lt;/code&gt; とかにしようかと思ったけど、これもなんだかなあw&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
