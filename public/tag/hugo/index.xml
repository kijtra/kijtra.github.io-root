<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>きじとら</title>
    <link>https://kijtra.com/tag/hugo/</link>
    <description>Webのこととかそのたもろもろ</description>
    <language>ja</language>
    <copyright>&amp;copy; kijtra.com</copyright>
    <lastBuildDate>Tue, 02 Jun 2015 18:39:32 +0900</lastBuildDate>
    <atom:link href="https://kijtra.com/tag/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ブログのバックエンドを「Hugo」(＋Github Pages)に変更</title>
      <link>https://kijtra.com/article/change-to-hugo</link>
      <pubDate>Tue, 02 Jun 2015 18:39:32 +0900</pubDate>
      
      <guid>https://kijtra.com/article/change-to-hugo</guid>
      <description>

&lt;p&gt;ブログのバックエンドをGo言語製のHugo(＋Github Pages)に全面変更したので記録ついでにメモ。&lt;/p&gt;

&lt;p&gt;これまで、ブログのバックエンドは以下のような構成だった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;開発環境 → &lt;a href=&#34;https://c9.io/&#34;&gt;Cloud9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;エディタ  →  同上&lt;/li&gt;
&lt;li&gt;CMS → &lt;a href=&#34;https://middlemanapp.com/jp/&#34;&gt;Middleman&lt;/a&gt;(Ruby)&lt;/li&gt;
&lt;li&gt;ホスティング → &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cloud9 に Middleman をインストールし、その Cloud9 上で Markdown ファイルを編集し、Cloud9 上でプレビューして確認、そのまま GitHub Pages にデプロイ（公開）。&lt;br /&gt;
この構成でネットとブラウザさえあればどこでも編集・公開できるんだけど、去年あたりから Cloud9 が無料版と有料版の差をつけはじめ、無料版ではサーバーの起動が非常に遅くなってややストレスに。&lt;br /&gt;
とうことで最近になって環境を変えることにした。&lt;/p&gt;

&lt;p&gt;自分の行動からして出先でブログ更新とかまずやらない（推敲のみ）ので、素直にローカルPCで記事作成してから GitHub Pages にデプロイするようにした。&lt;br /&gt;
でも新規投稿時の記事リンク貼りとかいちいち作業するわけにもいかないので静的サイトジェネレータを探してみたところ、ローカルで動かすなら &lt;strong&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/strong&gt; が最適な感じだった。&lt;br /&gt;
現状の環境は以下な感じ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;開発環境 → ローカル（Windows）&lt;/li&gt;
&lt;li&gt;エディタ  →  Atom（デフォルトの &lt;a href=&#34;https://github.com/atom/markdown-preview&#34;&gt;Markdown Preview&lt;/a&gt; 機能）&lt;/li&gt;
&lt;li&gt;CMS → &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ホスティング → &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hugo は Go言語 で制作されていて、Windows用に .exe ファイルが1つだけのアプリとして&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;提供されている&lt;/a&gt;。&lt;br /&gt;
なので、基本はコマンドプロンプトで hugo.exe （ダウンロード時はファイル名が違うのでリネームする）を呼び出しての作業になる。&lt;/p&gt;

&lt;p&gt;1ファイルなのでブログのリポジトリにそのまま入れて作業している。&lt;br /&gt;
で、ブログのリポジトリ自体は Dropbox にまるごと入れてるので Dropbox と Git があればどこでも作業ができなくもない（やらんけどw）。&lt;/p&gt;

&lt;h2 id=&#34;hugo-のインストール:1d76fd942bc4cf526400338024bd2133&#34;&gt;Hugo のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo の GitHub から最新版アプリをダウンロード&lt;/a&gt;。&lt;br /&gt;
ウチの環境は Windows7 64-bit なので &lt;strong&gt;hugo_0.xx_windows_amd64.zip&lt;/strong&gt; をダウンロードして解凍。&lt;br /&gt;
中に &lt;strong&gt;hugo_0.xx_windows_amd64.exe&lt;/strong&gt; があるので、「 &lt;strong&gt;hugo.exe&lt;/strong&gt; 」にリネームしてパスの通ったところに置くか、ウチのようにローカルのブログ用リポジトリのルートフォルダに入れる（そこでしか作業しない場合）。&lt;/p&gt;

&lt;h2 id=&#34;サイトの作成:1d76fd942bc4cf526400338024bd2133&#34;&gt;サイトの作成&lt;/h2&gt;

&lt;p&gt;コマンドプロンプトを開き、ローカルのブログ用フォルダ（空フォルダ。あるのは hugo.exe のみ）に移動。&lt;br /&gt;
以下のコマンドで初期構成が生成される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new site ./
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ファイル構成は自動で以下のように作られる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;▸ archetypes/  # ページ(mdファイル)のデフォルトテンプレート
▸ content/ # ここの中身が最終的に静的サイトとして生成される
▸ layouts/ # レイアウト、テーマ関連
▸ static/ # 画像やCSS、JSとかを管理する
  config.toml # サイト設定ファイル
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基本設定などは、基本的に生成された「config.toml」ファイルに書く。&lt;br /&gt;
個人的に toml という形式が慣れなかったので &lt;strong&gt;config.yaml&lt;/strong&gt; ファイルにすることにした。&lt;br /&gt;
設定ファイルは config.toml →なければ config.yaml →なければ config.json という順番で自動判別してくれる。&lt;/p&gt;

&lt;h2 id=&#34;テーマ-ページテンプレート-の作成:1d76fd942bc4cf526400338024bd2133&#34;&gt;テーマ（ページテンプレート）の作成&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;themes&lt;/code&gt; フォルダがなければ作っておく。&lt;br /&gt;
特にこだわりがなければ&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;公式テーマの集まってる処&lt;/a&gt;があるので、そこから落としてきて &lt;code&gt;themes&lt;/code&gt; に入れる。&lt;/p&gt;

&lt;p&gt;今回は自前のデザインを引き継ぐので自作することになったので、他のテーマを参考にしつつ、同じく &lt;code&gt;themes&lt;/code&gt; に作って入れた。&lt;br /&gt;
自前テーマの作り方は&lt;a href=&#34;http://gohugo.io/themes/creation/&#34;&gt;公式ドキュメント（英語）&lt;/a&gt;を参照。&lt;br /&gt;
基本的に&lt;a href=&#34;http://golang.org/pkg/html/template/&#34;&gt;Go言語のHTMLテンプレート機能&lt;/a&gt;に沿って記述する。  （&lt;a href=&#34;https://mustache.github.io/&#34;&gt;mustache&lt;/a&gt;に似てる）&lt;/p&gt;

&lt;h2 id=&#34;記事-ページ-の作成:1d76fd942bc4cf526400338024bd2133&#34;&gt;記事（ページ）の作成&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;content&lt;/code&gt; フォルダに Markdown ファイル（拡張子は .md または .markdown）を入れると、それが最終的にテーマ（テンプレート）を通してHTMLファイルとして生成される。&lt;br /&gt;
ウチの場合、記事ページは &lt;code&gt;/article/xxxxxxx&lt;/code&gt; というURL構成なので、 &lt;code&gt;content/article/xxxxxxxx.md&lt;/code&gt; というファイルを作っていく。&lt;/p&gt;

&lt;h3 id=&#34;markdownフォーマットの設定:1d76fd942bc4cf526400338024bd2133&#34;&gt;Markdownフォーマットの設定&lt;/h3&gt;

&lt;p&gt;Markdown は &lt;a href=&#34;http://gohugo.io/content/front-matter/&#34;&gt;Front Matter&lt;/a&gt; という形式で書くんだけど、デフォルトでは toml（TOML Front Matter） の形式になっている。&lt;br /&gt;
これも個人的に慣れてない（＆旧記事ページが対応してない）ので &lt;strong&gt;YAML Front Matter&lt;/strong&gt; 形式で書けるようにする。&lt;br /&gt;
&lt;code&gt;config.yaml&lt;/code&gt; に以下の一行を追加。（なければ）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;metaDataFormat:  &amp;quot;yaml&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;architypes-の作成:1d76fd942bc4cf526400338024bd2133&#34;&gt;architypes の作成&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;architypes&lt;/code&gt; フォルダが空の場合、とりあえず「**&lt;code&gt;default.md&lt;/code&gt;**」というファイルがないとページ作成時にエラーが出る。&lt;br /&gt;
&lt;code&gt;default.md&lt;/code&gt; の中身はページ生成時のデフォルトテンプレートとして使われる。&lt;br /&gt;
例としては以下のようなもの。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-md:architypes/default.md&#34;&gt;---
tags:
categories:
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;新規投稿ページの作成:1d76fd942bc4cf526400338024bd2133&#34;&gt;新規投稿ページの作成&lt;/h3&gt;

&lt;p&gt;以下のコマンドで新規ページが作成される。  （ブログのルートフォルダで実行）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new article/new-post-dayo.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記コマンドは &lt;code&gt;content/article/new-post-dayo.md&lt;/code&gt; を生成するコマンド。&lt;br /&gt;
実行すると以下のようなファイルが作られる。（&lt;code&gt;architypes/default.md&lt;/code&gt; の内容が反映される）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;---
date: 2015-06-01T10:51:30+09:00
title: new post dayo
tags:
categories:
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;サイトのプレビュー:1d76fd942bc4cf526400338024bd2133&#34;&gt;サイトのプレビュー&lt;/h2&gt;

&lt;p&gt;記事ファイルができたらプレビューしてみる。コマンドは以下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo server --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行すると以下のような表示が出る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;0 draft content
0 future content
1 pages created
0 paginator pages created
0 categories created
in 258 ms
Watching for changes in C:\xxxxxxx\xxxxxx\{content,layouts,static,themes\kijtra}
Serving pages from C:\xxxxxxx\xxxxxx\public
Web Server is available at http://127.0.0.1:1313/
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;http://127.0.0.1:1313/&lt;/code&gt; をブラウザで開いてプレビューできる。&lt;br /&gt;
&lt;code&gt;--watch&lt;/code&gt; はリアルタイムプレビューのオプションで、ファイル変更を監視してくれる。&lt;/p&gt;

&lt;p&gt;プレビューすると自動的に &lt;code&gt;public&lt;/code&gt; というフォルダが生成されている。&lt;br /&gt;
このフォルダが公開対象フォルダ(GitHub Pagesに置くフォルダ)になる。&lt;/p&gt;

&lt;h2 id=&#34;github-pagesでの公開:1d76fd942bc4cf526400338024bd2133&#34;&gt;GitHub Pagesでの公開&lt;/h2&gt;

&lt;p&gt;単純に生成されたファイルを GitHub Pages 用リポジトリにプッシュすれば公開される。&lt;br /&gt;
でも個人的にサイトのルートフォルダごと GitHub で管理したかったので&lt;a href=&#34;http://gohugo.io/tutorials/github-pages-blog/&#34;&gt;公式ドキュメントのGitHub Pagesで公開する方法（英語）&lt;/a&gt;を参考にした。&lt;/p&gt;

&lt;p&gt;この方法でやる場合、GitHubに&lt;strong&gt;2つのリポジトリが必要になる&lt;/strong&gt;。&lt;br /&gt;
ひとつはサイトの全ファイル用、もうひとつは公開用（&lt;em&gt;username&lt;/em&gt;.github.io）。&lt;/p&gt;

&lt;p&gt;おおまかな手順としては、全ファイル用リポジトリにファイルを置き、&lt;code&gt;public&lt;/code&gt; フォルダのみ &lt;a href=&#34;https://git-scm.com/book/ja/v1/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB&#34;&gt;git submodule&lt;/a&gt; 機能で別リポジトリにする。&lt;/p&gt;

&lt;p&gt;例としては、最初に以下のコマンドでリポジトリを設定した。&lt;br /&gt;
（すべてルートディレクトリ作業）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Gitの初期化
git init
git remote add origin https://github.com/&amp;lt;全ファイル用リポジトリ&amp;gt;.git

# サイトをビルド
hugo

# いったんpublicフォルダを削除（いつでも生成できるので心配無用）
rm -rf public

# gitにファイル追加
git add -A

# いったんコミット（プッシュはまだしない）
git commit -m &amp;quot;before add submodule&amp;quot;

# publicフォルダのみ公開用リポジトリとして管理
git submodule add git@github.com:&amp;lt;公開用リポジトリ&amp;gt;.git public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで公開の準備ができた。&lt;/p&gt;

&lt;p&gt;実際に公開する時には毎回いくつかのコマンドが必要「になって面倒なので、以下のような&lt;strong&gt;deploy.sh&lt;/strong&gt;というファイルを用意しておく。&lt;br /&gt;
※ Windowsでshファイルを実行するので、Git Bash(&lt;a href=&#34;https://msysgit.github.io/&#34;&gt;Git for Windows&lt;/a&gt;)が入っている必要がある&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh:deploy.sh&#34;&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# サイトをビルド
hugo

# 変更ファイルをgitに追加
git add -A

# コミット（引数があればそれをコミットメッセージにする）
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# 親フォルダ（全ファイル）をプッシュ
git push origin master

# 公開用フォルダ（サブモジュール）をプッシュ
git subtree push --prefix=public https://github.com/&amp;lt;公開用リポジトリ&amp;gt;.git master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、今後公開する時は以下のコマンドだけで公開可能。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;deploy.sh &amp;quot;コミットメッセージ&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
